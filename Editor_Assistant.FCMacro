#Editor Assistant
#Adds some capabilities to the python editor
#as a new task panel dialog
#https://forum.freecadweb.org/viewtopic.php?f=22&t=67242
#2022, <TheMarkster> LGPL2.1 or later
__version__ = "1.39"
UNDO_QUEUE_MAX_SIZE = 100
BOOKMARK_MARKER = "##:"

from PySide import QtGui,QtCore
import difflib
import json
from PySide2 import QtWebEngineWidgets as Web

try:
    import shiboken2 as shiboken
except:
    shiboken = None
mw = FreeCADGui.getMainWindow()


class FindEdit (QtGui.QLineEdit):
    def __init__(self, parent=None, form=None):
        super(FindEdit, self).__init__()
        self.form = form
        self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.__contextMenu)
        self.installEventFilter(self)
        self.setToolTip("Double click to set text from current selection in editor")

    def eventFilter(self, watched, event):
        if watched == self and event.type() == QtCore.QEvent.MouseButtonDblClick:
            if shiboken.isValid(self.form.currentEditor) and self.form.currentEditor:
                sel = self.form.currentEditor.textCursor().selectedText()
                if sel:
                    self.setText(sel)
                else:
                    self.form.toast("Nothing selected in editor","Error")
            else:
                self.form.toast("Editor is invalid","Error")
        return QtGui.QLineEdit.eventFilter(self, watched, event)

    def __contextMenu(self):
        self._normalMenu = self.createStandardContextMenu()
        self._addCustomMenuItems(self._normalMenu)
        self._normalMenu.exec_(QtGui.QCursor.pos())

    def _addCustomMenuItems(self, menu):
        menu.addSeparator()
        action = QtGui.QAction("Use selected", self)
        action.triggered.connect(self.useSelected)
        action.setEnabled(self.form.currentEditor.textCursor().selectedText() != "")
        menu.addAction(action)
        actionClear = QtGui.QAction("Clear", self)
        actionClear.triggered.connect(self.clear)
        actionClear.setEnabled(len(self.text()))
        menu.addAction(actionClear)

    def clear(self):
        self.setText("")

    def useSelected(self):
        txt_cur = self.form.currentEditor.textCursor()
        txt = txt_cur.selectedText()
        self.setText(txt)

class CustomQWidget(QtGui.QWidget):
    def __init__(self, parent=None, form=None):
        super(CustomQWidget, self).__init__()
        self.form = form
        self.hide()
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)
    def setFound(self,found):
        self.form.found = found

class TaskEditorAssistant:
    def __init__(self):
        #super(TaskEditorAssistant, self).__init__(mw, QtCore.Qt.Tool)
        self.pg = FreeCAD.ParamGet("User parameter:Plugins/Editor_Assistant")
        #GetInt(), SetInt(), GetFloat(), SetFloat(), GetBool(), SetBool(), GetASCII(), SetASCII()
        self.isTabbed=False
        self.found = False #find result
        self.gotoLineDict = {} #to save goto line edit value for each editor
        self.editorDict = {}
        self.editors = []
        self.parents = []
        self.grandparents = []
        self.titles = []
        self.undoQueue = [] #dictionary list {reason, old_text, name, tc}
        self.redoQueue = [] #tc holds a tuple (start, end) of selected text position
        self.snaps = [] #dictionary list {reason, old_text, name, tc}
        self.currentEditor = None
        self.timers = [] #toasts use this
        self.toastsLog = [tuple(["No previous toasts","Message"])]
        self.getEditors()
        self.blockSignals = False
        self.form = CustomQWidget(form=self)
        self.form.setObjectName("Editor assistant")
        self.form.setWindowTitle(" Editor assistant v"+__version__)
        self.form.setWindowIcon(QIconFromXPMString(__icon__))
        #self.form.form = self
        #self.print(f"self.editors = {self.editors}")
        for ed in self.editors:
            self.editorDict [ed.parent().parent().windowTitle()] = ed
        self.mdi = mw.findChild(QtGui.QMdiArea)
        self.mdi.subWindowActivated.connect(self.onSubWindowActivated)
        #self.layout = VBox = main layout (rest are all HBox)
        #topLabelLayout = toast label
        #editorLayout = editor list widget
        #refreshLayout = refresh button + goto menu button + goto line edit
        #undoLayout =  undo + pop undos + redo
        #findEditLayout = Find edit + search + search previous
        #replaceEditLayout = Replace edit + replace + replace all
        #indentLayout = unindent button + indent button + Match case checkbox + whole words checkbox
        #snapLayout = snap button + discard button + snap menu + pop button
        #consoleLayout = to console label + console line edit

        self.layout = QtGui.QVBoxLayout()
        self.form.setLayout(self.layout)
        topLabelLayout = QtGui.QHBoxLayout()
        self.mainMenuBtn = QtGui.QPushButton()
        self.mainMenuBtn.setIcon(QIconFromXPMString(__icon__))
        self.mainMenuBtn.setMaximumWidth(32)
        self.mainMenuBtn.setToolTip("Main menu")
        self.mainMenuBtn.clicked.connect(self.onMainMenuBtnClicked)
        topLabelLayout.addWidget(self.mainMenuBtn)
        self.msgBtn = QtGui.QPushButton()
        self.msgBtn.clicked.connect(self.onMsgBtnClicked)
        self.msgBtn.setIcon(QIconFromStandard("SP_FileDialogInfoView"))
        self.msgBtn.setToolTip("Toast message area, click to see most recent message")
        topLabelLayout.addWidget(self.msgBtn)
        self.layout.addLayout(topLabelLayout)

        editorLayout = QtGui.QHBoxLayout()
        showEditorList = self.pg.GetBool("ShowEditorList",True)
        self.editorList = QtGui.QListWidget()
        self.editorList.setMinimumHeight(85)
        self.editorList.currentItemChanged.connect(self.onEditorListCurrentItemChanged)
        self.editorList.doubleClicked.connect(self.onRefreshBtnClicked)
        self.editorList.setToolTip("Open editors, press Refresh to update")
        editorLayout.addWidget(self.editorList)
        if not showEditorList:
            self.editorList.setVisible(showEditorList)
        self.layout.addLayout(editorLayout)
        self.populateList()

        refreshLayout = QtGui.QHBoxLayout()
        showRefreshLine = self.pg.GetBool("ShowRefreshLine", True)
        self.refreshBtn = QtGui.QPushButton("Refresh")
        self.refreshBtn.setToolTip("Refresh list of editors in the list widget above")
        self.refreshBtn.setIcon(QIconFromStandard("SP_BrowserReload"))
        self.refreshBtn.clicked.connect(self.onRefreshBtnClicked)
        refreshLayout.addWidget(self.refreshBtn)
        self.gotoLineEdit = QtGui.QLineEdit()
        self.gotoLineEdit.returnPressed.connect(self.onGotoLineEditReturnPressed)
        self.gotoLineEdit.textChanged.connect(self.onGotoLineEditTextChanged)
        self.gotoLineEdit.setPlaceholderText("Goto Line numbers")
        self.gotoMenuBtn = QtGui.QPushButton()
        self.gotoMenuBtn.setToolTip(f"\
Goto menu\n\
Line numbers = comma separated lines in Goto line edit\n\
Bookmarks = lines with {BOOKMARK_MARKER} bookmark description\n\
Find results = results of searches for text in Find line edit\n\
")
        self.gotoMenuBtn.clicked.connect(self.onGotoMenuBtnClicked)
        self.gotoMenuBtn.setIcon(QIconFromStandard("SP_TitleBarUnshadeButton"))
        refreshLayout.addWidget(self.gotoMenuBtn)
        refreshLayout.addWidget(self.gotoLineEdit)
        self.layout.addLayout(refreshLayout)
        if not showRefreshLine:
            self.refreshBtn.setVisible(showRefreshLine)
            self.gotoMenuBtn.setVisible(showRefreshLine)
            self.gotoLineEdit.setVisible(showRefreshLine)

        showUndoLine = self.pg.GetBool("ShowUndoLine",True)
        undoLayout = QtGui.QHBoxLayout()
        self.undoBtn = QtGui.QPushButton()
        self.undoBtn.setEnabled(False)
        undoLayout.addWidget(self.undoBtn)
        self.undoBtn.clicked.connect(self.onUndoBtnClicked)
        self.undoBtn.setIcon(QIconFromXPMString(undo_icon))
        self.undoClearBtn = QtGui.QPushButton()
        self.undoClearBtn.setIcon(QIconFromStandard("SP_DialogResetButton"))
        self.undoClearBtn.setMaximumWidth(48)
        self.undoClearBtn.setToolTip("Purge undo/redo queues.  Clears both queues.")
        self.undoClearBtn.clicked.connect(self.onUndoClearBtnClicked)
        self.undoClearBtn.setEnabled(False)
        undoLayout.addWidget(self.undoClearBtn)
        self.redoBtn = QtGui.QPushButton()
        self.redoBtn.setEnabled(False)
        undoLayout.addWidget(self.redoBtn)
        self.redoBtn.clicked.connect(self.onRedoBtnClicked)
        self.redoBtn.setIcon(QIconFromXPMString(redo_icon))
        self.redoBtn
        if not showUndoLine:
            self.undoBtn.setVisible(showUndoLine)
            self.redoBtn.setVisible(showUndoLine)
            self.undoClearBtn.setVisible(showUndoLine)
        self.layout.addLayout(undoLayout)


        showFindLine = self.pg.GetBool("ShowFindLine",True)
        findEditLayout = QtGui.QHBoxLayout()
        self.findEdit = FindEdit(form=self)
        self.findEdit.setPlaceholderText("Find:")
        self.findEdit.returnPressed.connect(self.onFindEditReturnPressed)
        self.findEdit.textChanged.connect(self.onFindEditTextChanged)
        findEditLayout.addWidget(self.findEdit)
        self.findBtn = QtGui.QPushButton()
        self.findBtn.setIcon(QIconFromXPMString(find_next_icon))
        self.findBtn.setToolTip("Find next\nCtrl+Click = Find from start\nAlt+Click = Find from selection")
        self.findBtn.clicked.connect(self.onFindBtnClicked)
        self.findBackBtn = QtGui.QPushButton()
        self.findBackBtn.setIcon(QIconFromXPMString(find_previous_icon))
        self.findBackBtn.setToolTip("Find previous\nCtrl+Click = Find from end\nAlt+Click = Find from selection")
        self.findBackBtn.clicked.connect(self.onFindBackBtnClicked)
        findEditLayout.addWidget(self.findBtn)
        findEditLayout.addWidget(self.findBackBtn)
        if not showFindLine:
            self.findEdit.setVisible(showFindLine)
            self.findBtn.setVisible(showFindLine)
            self.findBackBtn.setVisible(showFindLine)
        self.layout.addLayout(findEditLayout)

        showReplaceLine = self.pg.GetBool("ShowReplaceLine",True)
        replaceEditLayout = QtGui.QHBoxLayout()
        #replaceEditLayout.addWidget(QtGui.QLabel("Replace: "))
        self.replaceEdit = FindEdit(form=self)
        self.replaceEdit.setPlaceholderText("Replace:")
        replaceEditLayout.addWidget(self.replaceEdit)
        self.replaceBtn = QtGui.QPushButton()
        self.replaceBtn.setToolTip("Replace current selection and find next")
        self.replaceBtn.clicked.connect(self.onReplaceBtnClicked)
        self.replaceBtn.setIcon(QIconFromXPMString(replace_icon))
        self.replaceAllBtn = QtGui.QPushButton()
        self.replaceAllBtn.setToolTip("Replace all")
        self.replaceAllBtn.setIcon(QIconFromXPMString(replace_all_icon))
        self.replaceAllBtn.clicked.connect(self.onReplaceAllBtnClicked)
        replaceEditLayout.addWidget(self.replaceBtn)
        replaceEditLayout.addWidget(self.replaceAllBtn)
        if not showReplaceLine:
            self.replaceEdit.setVisible(showReplaceLine)
            self.replaceBtn.setVisible(showReplaceLine)
            self.replaceAllBtn.setVisible(showReplaceLine)
        self.layout.addLayout(replaceEditLayout)

        showIndentLine = self.pg.GetBool("ShowIndentLine", True)
        indentLayout = QtGui.QHBoxLayout()
        self.indentBackBtn = QtGui.QPushButton()
        self.indentBackBtn.setIcon(QIconFromXPMString(unindent_icon))
        self.indentBackBtn.setToolTip("Decrease indentation of selection")
        self.indentBackBtn.clicked.connect(self.onIndentBackBtnClicked)
        indentLayout.addWidget(self.indentBackBtn)
        self.indentBtn = QtGui.QPushButton()
        self.indentBtn.setIcon(QIconFromXPMString(indent_icon))
        self.indentBtn.setToolTip("Increase indentation of selection")
        self.indentBtn.clicked.connect(self.onIndentBtnClicked)
        indentLayout.addWidget(self.indentBtn)
        self.matchWholeCheckBox = QtGui.QCheckBox()
        self.matchWholeCheckBox.setIcon(QIconFromXPMString(match_whole_word_icon))
        self.matchWholeCheckBox.setToolTip("Match whole words")
        self.matchWholeCheckBox.stateChanged.connect(self.onMatchWholeCheckBoxStateChanged)
        self.matchCaseCheckBox = QtGui.QCheckBox()
        self.matchCaseCheckBox.setIcon(QIconFromXPMString(match_case_icon))
        self.matchCaseCheckBox.setToolTip("Match case")
        self.loopCheckBox = QtGui.QCheckBox("Loop")
        self.loopCheckBox.setCheckState(QtCore.Qt.Checked)
        self.loopCheckBox.setToolTip ("Loop to start/end if text not found")
        indentLayout.addWidget(self.matchCaseCheckBox)
        indentLayout.addWidget(self.matchWholeCheckBox)
        indentLayout.addWidget(self.loopCheckBox)
        self.matchCaseCheckBox.stateChanged.connect(self.onFindEditTextChanged)
        if not showIndentLine:
            self.indentBackBtn.setVisible(showIndentLine)
            self.indentBackBtn.setVisible(showIndentLine)
            self.indentBackBtn.setVisible(showIndentLine)
            self.loopCheckBox.setVisible(showIndentLine)
            self.matchCaseCheckBox.setVisible(showIndentLine)
            self.matchWholeCheckBox.setVisible(showIndentLine)
        self.layout.addLayout(indentLayout)

        showSnapsLine = self.pg.GetBool("ShowSnapLine",True)
        snapLayout = QtGui.QHBoxLayout()
        self.takeSnapBtn = QtGui.QPushButton()

        self.takeSnapBtn.setIcon(QIconFromXPMString(snapshot_icon))
        self.takeSnapBtn.setMaximumWidth(48)
        self.takeSnapBtn.setToolTip("Take a snapshot of the text")
        self.snapCenterBtn = QtGui.QPushButton()

        self.snapMenuBtn = QtGui.QPushButton()

        snapCenterBtnLayout = QtGui.QHBoxLayout()
        snapCenterBtnLayoutMargins = QtCore.QMargins(0,0,0,0)
        snapCenterBtnLayout.setContentsMargins(snapCenterBtnLayoutMargins)
        snapCenterBtnLayout.setSpacing(0)
        self.snapCenterBtn.setLayout(snapCenterBtnLayout)
        self.snapCenterBtn.setMaximumWidth(64)
        self.discardSnapBtn = QtGui.QPushButton()

        self.discardSnapBtn.setIcon(QIconFromStandard("SP_DialogResetButton"))
        self.discardSnapBtn.clicked.connect(self.discardSnap)
        self.discardSnapBtn.setToolTip("Discard the latest snap")
        snapCenterBtnLayout.addWidget(self.discardSnapBtn)
        snapCenterBtnLayout.addWidget(self.snapMenuBtn)
        self.snapMenuBtn.setIcon(QIconFromStandard("SP_TitleBarUnshadeButton"))
        self.snapMenuBtn.setToolTip("\
Snapshots menu\n\
Restore = replace current text with snap and keep snap\n\
Restore to clipboard and keep snap in memory\n\
Restore to Text document and keep snap in memory\n\
Restore any = Possibility to restore to different document or a snap out of order\n\
Save to new text file and keep snap in memory\n\
Save all snaps to JSON file and keep all in memory\n\
Load = load all snaps from JSON file, replacing any in memory\n\
Pop = restore and discard snap\n\
Diff = show difference between snap and current text\n\
")
        self.popSnapBtn = QtGui.QPushButton("Restore")
        self.popSnapBtn.setVisible(showSnapsLine)
        self.takeSnapBtn.clicked.connect(self.onTakeSnapBtnClicked)
        self.snapMenuBtn.clicked.connect(self.onSnapMenuBtnClicked)
        self.popSnapBtn.clicked.connect(self.onPopSnapBtnClicked)
        snapLayout.addWidget(self.takeSnapBtn)
        snapLayout.addWidget(self.snapCenterBtn)
        snapLayout.addWidget(self.popSnapBtn)
        #self.snapMenuBtn.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        #self.snapMenuBtn.customContextMenuRequested.connect(self.snapMenuBtnContextMenu)
        self.layout.addLayout(snapLayout)
        if not showSnapsLine:
            self.takeSnapBtn.setVisible(showSnapsLine)
            self.snapCenterBtn.setVisible(showSnapsLine)
            self.discardSnapBtn.setVisible(showSnapsLine)
            self.snapMenuBtn.setVisible(showSnapsLine)

        showConsoleLine = self.pg.GetBool("ShowConsoleLine", True)
        consoleLayout = QtGui.QHBoxLayout()
        self.consoleLabel = QtGui.QLabel("To console:")

        consoleLayout.addWidget(self.consoleLabel)
        self.consoleEdit = QtGui.QLineEdit()

        self.consoleEdit.returnPressed.connect(self.onConsoleEditReturnPressed)
        self.consoleEdit.setToolTip("Access QPlainTextEdit of current editor directly.\n\
Enter command here and press return\n\
Variable 'editor' will remain afterwards for direct access from the console.\n\
Type 'help(editor)' in the console for help.\n\
")
        self.consoleEdit.setText("editor.selectAll()")
        self.consoleSendBtn = QtGui.QPushButton("Send")
        self.consoleSendBtn.clicked.connect(self.onConsoleBtnClicked)
        consoleLayout.addWidget(self.consoleEdit)
        #consoleLayout.addWidget(self.consoleSendBtn)
        self.layout.addLayout(consoleLayout)
        if not showConsoleLine:
            self.consoleLabel.setVisible(showConsoleLine)
            self.consoleEdit.setVisible(showConsoleLine)
        self.updateSnapBtns()

    def getEditors(self):
        self.editors = [child for child in mw.findChildren(QtGui.QPlainTextEdit) if child.objectName() != "Python console"]
        self.parents = [ed.parent() for ed in self.editors]
        self.grandparents = [p.parent() for p in self.parents]
        self.titles = [g.windowTitle() for g in self.grandparents]
        if hasattr(self, "editorList") and shiboken.isValid(self.editorList):
            curNames = [self.editorList.item(ii).text() for ii in range(0, self.editorList.count())]
            for ii,title in enumerate(self.titles):
                if not title in curNames:
                    cursor = self.editors[ii].textCursor()
                    self.takeSnap(title, cursor, "Auto snapshot",self.editors[ii].toPlainText())
        else:
            for ii,title in enumerate(self.titles):
                cursor = self.editors[ii].textCursor()
                self.takeSnap(title, cursor, "Auto snapshot",self.editors[ii].toPlainText())



    def setCurrentEditor(self, name="", focus=True):
        if not shiboken.isValid(self.editorList):
            return
        if name:
            if not name in self.editorDict:
                self.getEditors()
            self.currentEditor = self.editorDict[name]
            if name in self.titles:
                self.blockSignals=True
                self.editorList.setCurrentRow(self.titles.index(name))
                self.blockSignals=False
        else:
            if self.editorList.currentItem():
                name = self.editorList.currentItem().text()
                self.currentEditor = self.editorDict[name]
        if shiboken and shiboken.isValid(self.currentEditor) and self.currentEditor and not self.currentEditor.hasFocus():
            if focus and self.form.parent():
                self.form.parent().hide()
                self.currentEditor.setFocus()
                self.form.parent().show()
        #self.print(f"Current editor: {name}, text = {self.currentEditor.toPlainText()}")
    def onSubWindowActivated(self, arg1):
        if not shiboken.isValid(self.editorList):
            FreeCAD.Console.PrintMessage("still alive...\n")
            return
        sub = self.mdi.activeSubWindow()
        ed = sub.findChild(QtGui.QPlainTextEdit) if sub else None
        if ed:
            p = ed.parent()
            gp = p.parent()
            name = gp.windowTitle()
            if not name in self.editorDict:
                QtCore.QTimer().singleShot(50, self.refresh)

    def refresh(self):
        self.onRefreshBtnClicked(True)
        #self.getEditors()
        #cur = self.mdi.currentSubWindow()
        #ed = cur.findChild(QtGui.QPlainTextEdit) if cur else None
        #if ed:
        #    p = ed.parent()
        #    gp = p.parent()
        #    curName = gp.windowTitle()
        #    self.setCurrentEditor(curName)

    def checkForTabs(self):
        txt = self.getText()
        if txt.count("\t") > 0:
            self.toast(f"{self.editorList.currentItem().text()}: contains tabs.","Warning")

    def onEditorListCurrentItemChanged(self, current, previous):
        if self.blockSignals:
            return
        self.onRefreshBtnClicked(True)
        self.currentEditor.setFocus()
        if not self.currentEditor.hasFocus():
            self.toast(f"cannot set focus on {self.editorList.currentItem().text()}","Warning")
        self.checkForTabs()
        self.onFindEditTextChanged(None)
        self.updateUndoBtn()
        self.updateSnapBtns()
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        if name:
            if name in self.gotoLineDict:
                self.gotoLineEdit.setText(self.gotoLineDict[name])
            else:
                self.gotoLineEdit.setText("")

    def doCommand(self, cmd):
        FreeCADGui.doCommand(cmd)

    def setText(self, name, txt, reason):
        old_text = self.getText(name)
        old_cursor = self.editorDict[name].textCursor()
        self.editorDict[name].setPlainText(txt)
        self.setModified(name, old_text, reason, self.getTC(old_cursor))

    def getTC(self, text_cursor):
        return tuple([text_cursor.selectionStart(), text_cursor.selectionEnd()])

    def setTextCursor(self, name, tc):
        ed = self.editorDict[name]
        text_cursor = ed.textCursor()
        text_cursor.setPosition(tc[0])
        text_cursor.setPosition(tc[1], QtGui.QTextCursor.KeepAnchor)
        ed.setTextCursor(text_cursor)

    def getText(self, name=None):
        if not name:
            self.onRefreshBtnClicked(True)
            if not self.editorList.currentItem():
                self.toast("No editor","Error")
                return ""
            else:
                name = self.editorList.currentItem().text()
        return self.editorDict[name].toPlainText()

    def filterBackSlashes(self, instring):
            txt = instring.replace('\\t',chr(9)).replace('\\n',chr(10)).replace('\\r',chr(13))
            txt = txt.replace('\\b',chr(8)).replace('\\f',chr(12)).replace('\'',chr(39))
            txt = txt.replace('\\',chr(92))
            return txt

    def replace(self, name, txt, newTxt):
        if not txt:
            self.toast("nothing to replace","Error")
            return
        fullText = self.getText(name)
        if self.matchCaseCheckBox.checkState():
            txt = self.filterBackSlashes(txt)
            newText = fullText.replace(txt, newTxt)
            count = fullText.count(txt)
        else:
            fulltextlower = fullText.lower()
            txtlower = self.filterBackSlashes(txt.lower())
            indices = []#(from,to) tuples
            idx = 0
            while idx != -1:
                idx = fulltextlower.find(txtlower,idx)
                if idx==-1:
                    break
                indices.append(tuple([idx,idx+len(txtlower)]))
                idx += len(txtlower)
            chunks = []
            last = -1
            for i in reversed(indices):
                chunks.insert(0, fullText[i[1]:last])
                chunks.insert(0, newTxt)
                last = i[0]
            chunks.insert(0, fullText[:last])
            newText = "".join(chunks)
            count = len(indices)
        self.toast(f"{count} instances of {txt} replaced in {name}","Message")
        if not count == 0:
            self.setText(name, newText, f"replace {txt}")


    def onMatchWholeCheckBoxStateChanged(self, arg1):
        self.replaceAllBtn.setEnabled(not self.matchWholeCheckBox.checkState())

    def find(self, name, txt, backward = False):
        self.setCurrentEditor()
        if not self.currentEditor:
            self.toast("No editor selected")
            return
        if not txt:
            self.toast("Nothing to find.")
            return
        str1 = "'"
        findFlagsList = []

        if self.matchCaseCheckBox.checkState():
            findFlagsList.append("QtGui.QTextDocument.FindFlag.FindCaseSensitively")
        if self.matchWholeCheckBox.checkState():
            findFlagsList.append("QtGui.QTextDocument.FindFlag.FindWholeWords")
        if backward:
            findFlagsList.append("QtGui.QTextDocument.FindFlag.FindBackward")
        if findFlagsList:
            str1 = "', "
            findFlags = "|".join(findFlagsList)
        else:
            findFlags = ""
        newtxt = txt.replace('"', '\\"').replace("'","\\'")
        #self.currentEditor.find(txt, flags)
        #self.toast(f"self.currentEditor.find({txt},{flags})", "Message",10000)

        cmd = """
from PySide import QtGui
__editors__ = [child for child in FreeCADGui.getMainWindow().findChildren(QtGui.QPlainTextEdit)]
__parents__ = [ed.parent() for ed in __editors__]
__grandparents__ = [p.parent().windowTitle() for p in __parents__]
__editor__ = __editors__[__grandparents__.index('""" + name + """')]
__dlg__ = Gui.getMainWindow().findChild(QtGui.QWidget,"Editor assistant")
__dlg__.setFound(__editor__.find('""" + newtxt + str1 + findFlags + """))
__editor__.centerCursor()

del(__editors__, __parents__, __grandparents__, __editor__,__dlg__)

"""

        self.doCommand(cmd)

    def onMsgBtnClicked(self, arg1):
        self.toast("Toast log sent to report view","Information",log=False)
        self.print("Toasts log:\n")
        for ii,toast in enumerate(self.toastsLog):
            if ii==0:
                continue
            self.print(f"{ii}) {toast[0]}",toast[1])

    def onConsoleEditReturnPressed(self):
        self.onConsoleBtnClicked(True)

    def toast(self,msg,msgType='Error',length=5000,log=True,priority="high"):
        if not hasattr(self, "msgBtn") or not shiboken.isValid(self.msgBtn):
            return
        self.timers.append(msg)
        if priority == "high" or not self.msgBtn.text():
            self.msgBtn.setText(msg)
        if log:
            self.toastsLog.append(tuple([msg, msgType]))
        if msgType == 'Error':
            self.msgBtn.setStyleSheet("color: red")
            self.msgBtn.setIcon(QIconFromStandard("SP_MessageBoxCritical"))
        elif msgType == 'Message':
            self.msgBtn.setStyleSheet("color:black")
        elif msgType == 'Warning':
            self.msgBtn.setStyleSheet("color:yellow;background-color:navy;font-weight:bold")
            self.msgBtn.setIcon(QIconFromStandard("SP_MessageBoxWarning"))
        elif msgType == 'Information':
            self.msgBtn.setStyleSheet("color:blue")
            self.msgBtn.setIcon(QIconFromStandard("SP_FileDialogInfoView"))
        QtCore.QTimer().singleShot(length,self.clearToast)

    def clearToast(self):
        #in case there are new messages we don't want to delete them yet, let their timers do it later
        if not shiboken.isValid(self.msgBtn) or not self.form or not self.form.parent():
            return
        if len(self.timers) == 1:
            self.msgBtn.setText("")
            self.msgBtn.setStyleSheet("color:black")
            self.msgBtn.setIcon(QIconFromStandard("SP_FileDialogInfoView"))
            self.timers.pop()
        elif len(self.timers) > 1:
            self.timers.pop()
        #self.mainMenuBtn.show()
        #self.form.resize(self.form.parent().layout().closestAcceptableSize(self.form.parent(), QtCore.QSize(0,0)))
        #self.form.resize(self.form.layout().closestAcceptableSize(self.form, QtCore.QSize(0,0)))

    def onConsoleBtnClicked(self, arg1):
        consoleCmd = self.consoleEdit.text()
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        if not name:
            self.toast("No editor selected")
            return
        old_text = self.getText(name)
        old_cursor = self.editorDict[name].textCursor()
        cmd = """
from PySide import QtGui
__editors__ = [child for child in FreeCADGui.getMainWindow().findChildren(QtGui.QPlainTextEdit)]
__parents__ = [ed.parent() for ed in __editors__]
__grandparents__ = [p.parent().windowTitle() for p in __parents__]
editor = __editors__[__grandparents__.index('""" + name + """')]
dlg = Gui.getMainWindow().findChild(QtGui.QWidget,"Editor assistant").form
"""+ consoleCmd + """
del(__editors__, __parents__, __grandparents__)
"""
        self.doCommand(cmd)
        if not old_text == self.getText():
            self.setModified(name, old_text, "Console command", self.getTC(old_cursor))
        self.toast("editor now available as variable in python console","Message")
        pyconsole = mw.findChild(QtGui.QPlainTextEdit,"Python console")
        pyconsole.setFocus()
        self.form.parent().hide()
        pyconsole.parent().show()
        self.form.parent().show()

    def onFindEditReturnPressed(self):
        self.onFindBtnClicked(True)

    def onFindEditTextChanged(self, arg1):
        matchCase = self.matchCaseCheckBox.checkState()
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "Error")
            return
        plainText = self.currentEditor.toPlainText()
        txt = self.filterBackSlashes(self.findEdit.text())
        if not matchCase:
            plainText = plainText.lower()
            txt = txt.lower()
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        count = plainText.count(txt)
        if name and txt:
            self.toast(f"{txt} count in {name}: {count}","Message")

    def onFindBtnClicked(self, arg1=True):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid","Error")
            return
        self.currentEditor.setFocus()
        name = self.editorList.currentItem().text()
        txt = self.findEdit.text()
        matchCase = self.matchCaseCheckBox.checkState()
        modifiers = QtGui.QApplication.keyboardModifiers()
        if modifiers & QtCore.Qt.AltModifier:
            selText = self.currentEditor.textCursor().selectedText()
            self.findEdit.setText(selText if selText else txt)
            txt = self.findEdit.text()
        if modifiers & QtCore.Qt.ControlModifier:
            self.gotoLine(1, silent=True)

        self.found = False
        self.find(name, txt)
        if not self.found:
            if self.loopCheckBox.checkState():
                self.toast(f"{txt} not found in {name} --Looping back to start","Warning")
                self.gotoLine(1, silent=True)

    def updateSnapBtns(self,refresh=True):
        if refresh:
            self.onRefreshBtnClicked(True)
        if not hasattr(self, "editorList"):
            return
        curName = self.editorList.currentItem().text() if self.editorList.count() else None
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.popSnapBtn.setEnabled(False)
            self.popSnapBtn.setText("Pop")
            self.popSnapBtn.setToolTip("Pop/restore and discard latest snap")
            self.discardSnapBtn.setEnabled(False)
        else:
            self.popSnapBtn.setEnabled(True)
            self.popSnapBtn.setText(f"Pop {snaps[0]['reason']}")
            self.popSnapBtn.setToolTip(f"Pop/restore and discard {snaps[0]['reason']}")
            self.discardSnapBtn.setEnabled(True)

    def takeSnap(self, curName, curCursor=None, reason="", plainText=""):
        """takeSnap(curName, curCursor=None, reason="")
           if not curCursor it is taken from current editor
           if not reason it is Snap #NNN"""
        curText = self.getText(curName) if not plainText else plainText
        curCursor = self.currentEditor.textCursor() if not curCursor else curCursor
        tc = self.getTC(curCursor)
        count = 1
        for snap in self.snaps:
            if snap["name"] == curName:
                count += 1
        if reason:
            thisReason = reason
        else:
            thisReason = f"Snap #{count}"
        thisSnap = {"name":curName, "old_text":curText, "reason":thisReason, "tc":tc}
        self.snaps.append(thisSnap)
        self.toast(f"{thisSnap['reason']} taken of {curName}","Message")
        if len(self.snaps) > UNDO_QUEUE_MAX_SIZE:
            self.snaps.pop(0)
            self.toast("Snaps count exceeds {UNDO_QUEUE_MAX_SIZE}, discarding oldest snap","Warning")
        self.updateSnapBtns(refresh=False)

    def onTakeSnapBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        self.updateSnapBtns()
        curName = self.editorList.currentItem().text() if self.editorList.count() else ""
        if not curName:
            self.toast("No current editor","Error")
            return
        self.takeSnap(curName)

    def getSnaps(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        return snaps

    def discardSnap(self,idx=0):
        """discard a snap, default=0 = latest snap"""
        snaps = self.getSnaps()
        if not snaps:
            self.toast("No snaps to discard for this editor","Error")
            self.updateSnapBtns()
            return
        else:
            self.snaps.remove(snaps[idx])
            self.updateSnapBtns()

    def discardAllSnaps(self):
        self.onRefreshBtnClicked(True)
        self.snaps = []
        self.updateSnapBtns()

    def onPopSnapBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No snaps to restore for this editor","Error")
            self.updateSnapBtns()
            return
        else:
            old_text = self.getText(curName)
            old_cursor = self.currentEditor.textCursor()
            self.currentEditor.setPlainText(snaps[0]["old_text"])
            #self.currentEditor.setTextCursor(snaps[0]['tc'])
            self.setTextCursor(self.editorList.currentItem().text(), snaps[0]['tc'])
            self.snaps.remove(snaps[0])
            self.updateSnapBtns()
            self.toast(f"Popped and restored {snaps[0]['reason']} to {snaps[0]['name']}","Message")
            self.setModified(curName, old_text, f"Pop {snaps[0]['reason']}", self.getTC(old_cursor))

    def showWidgets(self,groupName,show):
        showDict = {
            "ShowEditorList": [self.editorList],
            "ShowRefreshLine": [self.refreshBtn, self.gotoMenuBtn, self.gotoLineEdit],
            "ShowUndoLine": [self.undoBtn, self.undoClearBtn, self.redoBtn],
            "ShowFindLine": [self.findEdit, self.findBtn, self.findBackBtn],
            "ShowReplaceLine": [self.replaceEdit, self.replaceBtn, self.replaceAllBtn],
            "ShowIndentLine": [self.indentBackBtn, self.indentBtn, self.matchCaseCheckBox, \
                                self.matchWholeCheckBox, self.loopCheckBox],
            "ShowSnapsLine": [self.takeSnapBtn, self.discardSnapBtn, self.snapCenterBtn, self.snapMenuBtn, self.popSnapBtn],
            "ShowConsoleLine": [self.consoleLabel, self.consoleEdit]
            }
        for widget in showDict[groupName]:
            widget.setVisible(show)

    def setBool(self, name, value):
        self.pg.SetBool(name,value)
        self.showWidgets(name,value)

    def onMainMenuBtnClicked(self, arg1):
        """general purpose menu for things not related to going to a line
           or managing snaps or diffs"""

        def makeToggler(name,value): return lambda: self.setBool(name,value)

#begin settings menu
        showEditorList = self.pg.GetBool("ShowEditorList", True)
        showRefreshLine = self.pg.GetBool("ShowRefreshLine", True)
        showUndoLine = self.pg.GetBool("ShowUndoLine", True)
        showFindLine = self.pg.GetBool("ShowFindLine", True)
        showReplaceLine = self.pg.GetBool("ShowReplaceLine", True)
        showIndentLine = self.pg.GetBool("ShowIndentLine", True)
        showSnapsLine = self.pg.GetBool("ShowSnapsLine", True)
        showConsoleLine = self.pg.GetBool("ShowConsoleLine", True)

        mainMenu = QtGui.QMenu("Main menu")
        settingsMenu = QtGui.QMenu("Settings")
        layoutMenu = QtGui.QMenu("Layout")
        settingsMenu.addMenu(layoutMenu)

        togglers = []

#settings -> layout
        editorListAction = QtGui.QAction("Editor list", layoutMenu, checkable=True)
        editorListAction.setChecked(showEditorList)
        togglers.append(makeToggler("ShowEditorList",not editorListAction.isChecked()))
        editorListAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(editorListAction)

        refreshLineAction = QtGui.QAction("Refresh line",layoutMenu, checkable=True)
        refreshLineAction.setChecked(showRefreshLine)
        togglers.append(makeToggler("ShowRefreshLine", not refreshLineAction.isChecked()))
        refreshLineAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(refreshLineAction)

        undoLineAction = QtGui.QAction("Undo line", layoutMenu, checkable=True)
        undoLineAction.setChecked(showUndoLine)
        togglers.append(makeToggler("ShowUndoLine", not undoLineAction.isChecked()))
        undoLineAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(undoLineAction)

        findLineAction = QtGui.QAction("Find line", layoutMenu, checkable=True)
        findLineAction.setChecked(showFindLine)
        togglers.append(makeToggler("ShowFindLine", not findLineAction.isChecked()))
        findLineAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(findLineAction)

        replaceLineAction = QtGui.QAction("Replace line", layoutMenu, checkable=True)
        replaceLineAction.setChecked(showReplaceLine)
        togglers.append(makeToggler("ShowReplaceLine", not replaceLineAction.isChecked()))
        replaceLineAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(replaceLineAction)

        indentLineAction = QtGui.QAction("Indent line", layoutMenu, checkable=True)
        indentLineAction.setChecked(showIndentLine)
        togglers.append(makeToggler("ShowIndentLine", not indentLineAction.isChecked()))
        indentLineAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(indentLineAction)

        snapsLineAction = QtGui.QAction("Snaps line", layoutMenu, checkable=True)
        snapsLineAction.setChecked(showSnapsLine)
        togglers.append(makeToggler("ShowSnapsLine", not snapsLineAction.isChecked()))
        snapsLineAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(snapsLineAction)

        consoleLineAction = QtGui.QAction("Console line", layoutMenu, checkable=True)
        consoleLineAction.setChecked(showConsoleLine)
        togglers.append(makeToggler("ShowConsoleLine", not consoleLineAction.isChecked()))
        consoleLineAction.toggled.connect(togglers[-1])
        layoutMenu.addAction(consoleLineAction)
#end settings->layout

        mainMenu.addMenu(settingsMenu)
#end of settings
#begin view mode
        viewModeMenu = QtGui.QMenu("View mode")
        mainMenu.addMenu(viewModeMenu)

        tabbedModeAction = QtGui.QAction("Tabbed")
        tabbedModeAction.triggered.connect(self.setTabbedView)
        viewModeMenu.addAction(tabbedModeAction)

        tiledModeAction = QtGui.QAction("Tiled")
        tiledModeAction.triggered.connect(lambda: self.mdi.tileSubWindows())
        viewModeMenu.addAction(tiledModeAction)

        cascadeModeAction = QtGui.QAction("Cascade")
        cascadeModeAction.triggered.connect(lambda: self.mdi.cascadeSubWindows())
        viewModeMenu.addAction(cascadeModeAction)

#start goto menu
        gotoMenu = self.makeGotoMenu()
        mainMenu.addMenu(gotoMenu)
#start snaps menu
        snapsMenu = self.makeSnapsMenu()
        mainMenu.addMenu(snapsMenu)

#close menu
        if self.isTabbed:
            closeAction = QtGui.QAction("Close")
            closeAction.triggered.connect(self.close)
            mainMenu.addAction(closeAction)
        mainMenu.exec_(self.mainMenuBtn.mapToGlobal(QtCore.QPoint()))

    def close(self):
        self.mdi.subWindowActivated.disconnect(self.onSubWindowActivated)
        self.form.close()

    def setTabbedView(self):
        self.mdi.setViewMode(QtGui.QMdiArea.ViewMode.TabbedView)
        windowList = self.mdi.subWindowList()
        for wl in windowList:
            wl.showMaximized()

    def onSnapMenuBtnClicked(self, arg1):
        qp = QtCore.QPoint()
        self.snapMenuBtnContextMenu(qp)

    def makeSnapsMenu(self):
        snapsMenu = QtGui.QMenu("Snaps")
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text() if self.editorList.count() else ""
        if not curName:
            self.toast("No current editor","Error")
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]

        takeSnapshotAction = QtGui.QAction("Take snapshot", mw)
        takeSnapshotAction.triggered.connect(lambda: self.onTakeSnapBtnClicked(True))
        snapsMenu.addAction(takeSnapshotAction)
        takeSnapshotAction.setEnabled(curName != "")

        restoreMenu = QtGui.QMenu("Restore last snap")
        restoreToCurrentEditorAction = QtGui.QAction("Restore to current editor", mw)
        restoreToCurrentEditorAction.triggered.connect(self.doRestoreToCurrentEditor)
        restoreToCurrentEditorAction.setEnabled(len(snaps) > 0)
        restoreMenu.addAction(restoreToCurrentEditorAction)

        restoreToClipboardAction = QtGui.QAction("Restore to clipboard", mw)
        restoreToClipboardAction.triggered.connect(self.doRestoreToClipboard)
        restoreToClipboardAction.setEnabled(len(snaps) > 0)
        restoreMenu.addAction(restoreToClipboardAction)

        restoreToTextDocumentAction = QtGui.QAction("Restore to new Text document", mw)
        restoreToTextDocumentAction.triggered.connect(self.doRestoreToTextDocument)
        restoreToTextDocumentAction.setEnabled(len(snaps) > 0)
        restoreMenu.addAction(restoreToTextDocumentAction)
        snapsMenu.addMenu(restoreMenu)
        if not len(self.getSnaps()):
            restoreMenu.setEnabled(False)

        def makeRestoreAnyLambda(name,reason,idx): return lambda: self.restoreAny(name,reason,idx)

        restoreAnys = self.getRestoreAnys()
        restoreAnysMenu = QtGui.QMenu("Restore Any")
        restoreAnyActions = []
        restoreAnyLambdas = [makeRestoreAnyLambda(tup[0],tup[1],ii) for ii,tup in enumerate(restoreAnys)]
        for ii,tup in enumerate(restoreAnys):
            restoreAnyActions.append(QtGui.QAction(f"Restore {tup[0]}: {tup[1]}", mw))
            restoreAnyActions[-1].triggered.connect(restoreAnyLambdas[ii])
            restoreAnysMenu.addAction(restoreAnyActions[-1])
        snapsMenu.addMenu(restoreAnysMenu)
        if not restoreAnys:
            restoreAnysMenu.setEnabled(False)

        saveMenu = QtGui.QMenu("Save")
        saveSnapshotAsAction = QtGui.QAction("Save snapshot as...", mw)
        saveSnapshotAsAction.triggered.connect(self.doSaveSnapshotAs)
        saveSnapshotAsAction.setEnabled(len(snaps) > 0)
        saveMenu.addAction(saveSnapshotAsAction)

        saveAllSnapshotAsAction = QtGui.QAction("Save all snaps to JSON file...", mw)
        saveAllSnapshotAsAction.triggered.connect(self.saveSnapsToJSON)
        saveAllSnapshotAsAction.setEnabled(len(snaps) > 0)
        saveMenu.addAction(saveAllSnapshotAsAction)
        snapsMenu.addMenu(saveMenu)
        if not len(self.getSnaps()):
            saveMenu.setEnabled(False)

        loadMenu = QtGui.QMenu("Load")
        loadSnapshotAction = QtGui.QAction("Load snapshots from JSON...", mw)
        loadSnapshotAction.triggered.connect(self.loadSnapsFromJSON)
        loadMenu.addAction(loadSnapshotAction)

        snapsMenu.addMenu(loadMenu)
        discardMenu = QtGui.QMenu("Discard")

        def makeDiscardSnapLambda(x): return lambda: self.discardSnap(x)

        discardAction = QtGui.QAction("Discard latest snap", mw)
        discardAction.setToolTip("Discards most recent snap for the current editor")
        discardAction.triggered.connect(self.discardSnap)
        discardAction.setEnabled(len(snaps) > 0)
        discardMenu.addAction(discardAction)

        discardAllAction = QtGui.QAction("Discard all snaps", mw)
        discardAllAction.setToolTip("Disards all snaps for all editors")
        discardAllAction.triggered.connect(self.discardAllSnaps)
        discardAllAction.setEnabled(len(snaps) > 0)
        discardMenu.addAction(discardAllAction)

        discardSnaps = self.getSnaps()
        discardSnapActions = []
        discardSnapLambdas = [makeDiscardSnapLambda(ii) for ii,snap in enumerate(discardSnaps)]
        for ii,snap in enumerate(discardSnaps):
            discardSnapActions.append(QtGui.QAction(f"Discard {snap['reason']}", mw))
            discardSnapActions[-1].triggered.connect(discardSnapLambdas[ii])
            discardMenu.addAction(discardSnapActions[-1])
        if not discardSnaps:
            discardMenu.setEnabled(False)

        snapsMenu.addMenu(discardMenu)

        def makeDiffLambda(x,y,xlab="",ylab=""): return lambda: self.showDiff(x,y,xlab,ylab)

        diffSnaps = self.getDiffSnaps(curName)
        diffSnapsMenu = QtGui.QMenu("Diff current editor")
        diffSnapActions = []
        diffSnapLambdas = [makeDiffLambda(snap['name'],ii) for ii,snap in enumerate(diffSnaps)]
        for ii,snap in enumerate(diffSnaps):
            diffSnapActions.append(QtGui.QAction(f"Diff {snap['reason']}", mw))
            diffSnapActions[-1].triggered.connect(diffSnapLambdas[ii])
            diffSnapsMenu.addAction(diffSnapActions[-1])

        for ii,edName in enumerate(self.editorDict.keys()):
            if edName == curName:
                continue
            diffSnapActions.append(QtGui.QAction(f"Diff {edName}"))
            diffSnapLambdas.append(makeDiffLambda(self.getText(edName), self.getText(curName), edName, curName))
            diffSnapActions[-1].triggered.connect(diffSnapLambdas[ii+len(diffSnaps)])
            diffSnapsMenu.addAction(diffSnapActions[-1])

        clipText = QtGui.QClipboard().text()

        diffSnapActions.append(QtGui.QAction(f"Diff clipboard text"))
        diffSnapLambdas.append(makeDiffLambda(clipText, self.getText(curName),"Clipboard text", curName))
        diffSnapActions[-1].triggered.connect(diffSnapLambdas[-1])
        diffSnapsMenu.addAction(diffSnapActions[-1])
        if not clipText:
            diffSnapActions[-1].setEnabled(False)

        snapsMenu.addMenu(diffSnapsMenu)
        if not diffSnapActions:
            diffSnapsMenu.setEnabled(False)

        def makeEditReasonLambda(name,reason,idx): return lambda: self.editReason(name,reason,idx)

        editReasons = self.getEditReasons(curName)
        editReasonsMenu = QtGui.QMenu("Edit reason")
        editReasonActions = []
        editReasonLambdas = [makeEditReasonLambda(tup[0],tup[1],ii) for ii,tup in enumerate(editReasons)]
        for ii,tup in enumerate(editReasons):
            editReasonActions.append(QtGui.QAction(f"Edit reason {tup[0]}: {tup[1]}", mw))
            editReasonActions[-1].triggered.connect(editReasonLambdas[ii])
            editReasonsMenu.addAction(editReasonActions[-1])
        snapsMenu.addMenu(editReasonsMenu)
        if not editReasons:
            editReasonsMenu.setEnabled(False)
        return snapsMenu


    def snapMenuBtnContextMenu(self, point):
        snapsMenu = self.makeSnapsMenu()

        snapsMenu.exec_(self.snapMenuBtn.mapToGlobal(point))

    def editReason(self, name, reason, idx):
        snap = self.snaps[idx]
        new_reason,ok = QtGui.QInputDialog.getText(mw,"Edit reason",f"Enter a new reason in place of:\n\
{reason}\n", text=reason)
        if not ok:
            return
        snap['reason'] = new_reason
        self.snaps[idx] = snap
        self.toast(f"snap of {name}:{reason} updated to {new_reason}","Information")
        return

    def getEditReasons(self,curName):
        """list of tuple(name, reason, idx)"""
        editReasons = [tuple([snap['name'],snap['reason'],ii]) for ii,snap in enumerate(self.snaps)]
        return editReasons

    def doRestoreToCurrentEditor(self):
        snaps = self.getSnaps()
        if not snaps:
            self.toast("No snaps to restore", "Error")
            return
        self.restoreAny(snaps[0]['name'], snaps[0]['reason'],0)

    def restoreAny(self, name, reason, idx):
        """restore any snap to current document"""
        snap = self.snaps[idx]
        curName = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        if not curName:
            self.toast("Invalid current editor","Error")
            return
        if curName != name:
            items = ["Oops, wrong document -- cancel",f"I confirm: overwrite {curName} with this snap"]
            item,ok = QtGui.QInputDialog.getItem(mw,f"Restore",f"You are about to restore:{name}: {reason} to a different document: {curName}.\n",items)
            if not bool (ok and item == items[1]):
                return
        old_text = self.getText(curName)
        old_cursor = self.currentEditor.textCursor()
        self.currentEditor.setPlainText(snap["old_text"])
        self.setTextCursor(self.editorList.currentItem().text(), snap['tc'])
        self.setModified(curName, old_text, f"Restore {snap['reason']}", self.getTC(old_cursor))
        self.toast(f"snap of {name}:{reason} updated to {curName}: {snap['reason']}","Information")
        return

    def getRestoreAnys(self):
        """list of tuple(name, reason, idx)"""
        restoreAnys = [tuple([snap['name'],snap['reason'],ii]) for ii,snap in enumerate(self.snaps)]
        return restoreAnys

    def saveSnapsToJSON(self):
        """save all snaps to a JSON text file"""
        fname = QtGui.QFileDialog.getSaveFileName(FreeCADGui.getMainWindow(),"Save all snaps to a JSON file",filter='*.*')[0]
        if not fname:
            return
        with open(fname, "w") as outfile:
            json.dump(self.snaps, outfile)
        self.toast(f"All snaps saved to {outfile}", "Information")

    def loadSnapsFromJSON(self):
        """load previously saved snaps from a JSON file"""
        fname = QtGui.QFileDialog.getOpenFileName(FreeCADGui.getMainWindow(),"Open a JSON file",filter='*.*')[0]
        if not fname:
            return
        try:
            f = open(fname)
        except Exception as ex:
            self.toast(f"{ex}","Error")
            return
        try:
            self.snaps = json.load(f)
        except Exception as ex:
            self.toast(f"{ex}","Error")
            f.close()
            return
        self.updateSnapBtns()
        self.toast(f"Snaps loaded and restored from {fname}","Message")


    def getDiffSnaps(self, name):
        self.onRefreshBtnClicked(True)
        curName = name
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        return snaps

    def showDiff(self, name, idx, firstLabel = "", secondLabel = ""):
        """make a diff of the snap and the text in the current editor"""
        if isinstance(idx, int):
            snaps = self.getDiffSnaps(name)
            plainText = self.getText(name).splitlines()
            plainLabel = name
            snapText = snaps[idx]['old_text'].splitlines()
            snapLabel = snaps[idx]['reason']
        else: #presume to strings passed in to be diffed
            snapText = name.splitlines()
            plainText = idx.splitlines()
            plainLabel = firstLabel
            snapLabel = secondLabel
        d = difflib.HtmlDiff(tabsize=4)
        ds = DiffSaver(form=self, snapText=snapText, plainText=plainText, label1=plainLabel, label2=snapLabel)
        ds.setWindowFlag(QtCore.Qt.WindowMinimizeButtonHint, True)
        ds.setWindowFlag(QtCore.Qt.WindowMaximizeButtonHint, True)
        ds.resizeEvent = ds.onResize
        self.mdi.addSubWindow(ds)
        layout = QtGui.QVBoxLayout()
        ds.setLayout(layout)
        ds.setWindowIcon(QIconFromXPMString(__icon__))
        from PySide2 import QtWebEngineWidgets as Web
        ds.webView = Web.QWebEngineView()
        #ds.webView.setHtml(ds.diff)
        saveBtn = QtGui.QPushButton("Save to html...")
        saveBtn.clicked.connect(ds.saveDiffToHtml)
        sliderLayout=QtGui.QHBoxLayout()
        sliderLayout.addWidget(saveBtn)
        ds.numlinesSpinBox = QtGui.QSpinBox()
        ds.numlinesSpinBox.setValue(5)
        ds.contextCheckBox = QtGui.QCheckBox()
        ds.contextCheckBox.setCheckState(QtCore.Qt.Checked)
        sliderLayout.addWidget(QtGui.QLabel("Context:"))
        sliderLayout.addWidget(ds.contextCheckBox)
        sliderLayout.addWidget(QtGui.QLabel("Context lines:"))
        sliderLayout.addWidget(ds.numlinesSpinBox)
        ds.contextCheckBox.stateChanged.connect(ds.onContextCheckBoxStateChanged)
        ds.numlinesSpinBox.valueChanged.connect(ds.onNumlinesSpinBoxValueChanged)
        sliderLayout.addWidget(QtGui.QLabel("Zoom:"))
        ds.slider = QtGui.QSlider(QtCore.Qt.Horizontal)
        ds.slider.setRange(25, 500)
        ds.slider.valueChanged.connect(ds.onSliderValueChanged)
        ds.slider.setMinimum(25)
        ds.slider.setMaximum(500)
        ds.slider.setTickPosition(QtGui.QSlider.TicksBelow)
        ds.slider.setTickInterval(25)
        ds.slider.setValue(100)
        sliderLayout.addWidget(ds.slider)
        sliderLayout.addWidget(QtGui.QLabel("Col width:"))
        ds.widthSlider = QtGui.QSlider(QtCore.Qt.Horizontal)
        ds.widthSlider.setRange(25, 2000)
        ds.widthSlider.valueChanged.connect(ds.onWidthSliderValueChanged)
        ds.widthSlider.setMinimum(25)
        ds.widthSlider.setMaximum(2000)
        ds.widthSlider.setTickPosition(QtGui.QSlider.TicksBelow)
        ds.widthSlider.setTickInterval(25)
        ds.widthSlider.setValue(500)
        sliderLayout.addWidget(ds.widthSlider)
        layout.addLayout(sliderLayout)
        if ds.label1 and ds.label2:
            labelLayout = QtGui.QHBoxLayout()
            lab1 = QtGui.QLabel(ds.label1)
            lab2 = QtGui.QLabel(ds.label2)
            lab1.setMaximumHeight(20)
            lab2.setMaximumHeight(20)
            lab1.setAlignment(QtCore.Qt.AlignCenter)
            lab2.setAlignment(QtCore.Qt.AlignCenter)
            labelLayout.addWidget(lab1)
            labelLayout.addWidget(lab2)
            layout.addLayout(labelLayout)
        layout.addWidget(ds.webView)

        ds.show()
        ds.resize(640,480)
        self.onRefreshBtnClicked(True)
        #self.toast(f"make diff of snap = {idx}","Message")


    def doSaveSnapshotAs(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No saved snapshot to save as","Error")
            self.updateSnapBtns()
            return
        else:
            fname = QtGui.QFileDialog.getSaveFileName(FreeCADGui.getMainWindow(),"Save snapshot to text file",filter='*.*')[0]
            if not fname:
                return
            with open(fname,"w") as outfile:
                outfile.write(snaps[0]['old_text'])
            self.toast(f"Snapshot: {snaps[0]['reason']} saved to {fname}","Message")

    def doRestoreToClipboard(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No saved snapshot to send to clipboard","Error")
            self.updateSnapBtns()
            return
        else:
            clipboard = QtGui.QClipboard()
            clipboard.setText(snaps[0]["old_text"])
            self.toast(f"Snapshot: {snaps[0]['reason']} sent to clipboard","Message")

    def doRestoreToTextDocument(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No saved snapshot to restore to text document","Error")
            self.updateSnapBtns()
            return
        else:
            doc = FreeCAD.ActiveDocument if FreeCAD.ActiveDocument else FreeCAD.newDocument()
            textDoc = doc.addObject("App::TextDocument","Text document")
            textDoc.Text = snaps[0]['old_text']
            self.toast(f"Snapshot: {snaps[0]['reason']} sent to {textDoc.Name}","Message")
            textDoc.ViewObject.doubleClicked()
            doc.recompute()

    def onUndoBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        self.updateUndoBtn()
        curName = self.editorList.currentItem().text()
        curCursor = self.editorDict[curName].textCursor()
        for queue in reversed(self.undoQueue):
            if curName == queue["name"]:
                redo = {"name":curName, "reason":queue["reason"], "old_text":self.getText(curName), "tc":self.getTC(curCursor)}
                self.currentEditor.setPlainText(queue["old_text"])
                self.setTextCursor(curName, queue['tc'])
                self.redoQueue.append(redo)
                self.undoQueue.pop()
                self.updateUndoBtn()
                break

    def onUndoClearBtnClicked(self, arg1):
        count = len(self.undoQueue) + len(self.redoQueue)
        self.undoQueue = []
        self.redoQueue = []
        self.updateUndoBtn()
        self.toast(f"Undo/redo queues purged ({count} items)","Message")

    def onRedoBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        self.updateUndoBtn()
        curName = self.editorList.currentItem().text()
        for queue in reversed(self.redoQueue):
            if curName == queue["name"]:
                undo = {"name":curName, "reason":queue["reason"], "old_text":self.getText(curName), "tc":self.getTC(self.currentEditor.textCursor())}
                self.currentEditor.setPlainText(queue["old_text"])
                #self.currentEditor.setTextCursor(queue['tc'])
                self.setTextCursor(curName, queue['tc'])
                self.undoQueue.append(undo)
                self.redoQueue.pop()
                self.updateUndoBtn()
                break

    def updateUndoBtn(self):
        self.undoBtn.setText("")
        if not self.editorList.currentItem():
            return
        curName = self.editorList.currentItem().text()

        self.undoBtn.setEnabled(False)
        for queue in reversed(self.undoQueue):
            if curName == queue["name"]:
                self.undoBtn.setText(f"Undo {queue['reason']}")
                self.undoBtn.setEnabled(True)
                break
        self.redoBtn.setText("")
        self.redoBtn.setEnabled(False)
        for queue in reversed(self.redoQueue):
            if curName == queue["name"]:
                self.redoBtn.setText(f"Redo {queue['reason']}")
                self.redoBtn.setEnabled(True)
                break
        self.undoClearBtn.setEnabled(len(self.undoQueue)+len(self.redoQueue))

    def onFindBackBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid","Error")
            return
        self.currentEditor.setFocus()
        name = self.editorList.currentItem().text()
        txt = self.findEdit.text()
        modifiers = QtGui.QApplication.keyboardModifiers()
        if modifiers & QtCore.Qt.AltModifier:
            selText = self.currentEditor.textCursor().selectedText()
            self.findEdit.setText(selText if selText else txt)
            txt = self.findEdit.text()
        if modifiers & QtCore.Qt.ControlModifier:
            self.gotoLine(-1, silent=True, eol=True)

        self.found = False
        self.find(name, txt, True)
        if not self.found:
            if self.loopCheckBox.checkState():
                self.toast(f"{txt} not found in {name} --Looping back to end","Warning")
                self.gotoLine(-1, silent=True, eol=True)
            else:
                self.toast(f"{txt} not found backwards in {name}","Message")

    def setModified(self, name, old_text, reason, tc):
        self.undoQueue.append({"name":name, "old_text": old_text, "reason":reason, "tc":tc})
        if len(self.undoQueue) > UNDO_QUEUE_MAX_SIZE:
            self.toast(f"undo queue reached max size {UNDO_QUEUE_MAX_SIZE}\ndiscarding {self.undoQueue[0]['reason']}","Warning")
            self.undoQueue.pop(0)
        self.updateUndoBtn()
        self.currentEditor.document().setModified(True)
        self.currentEditor.centerCursor()

    def onIndentBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "Error")
            return
        self.currentEditor.setFocus()
        old_text = self.getText()
        tc = self.currentEditor.textCursor()
        txt = tc.selectedText()
        if not txt:
            self.toast("nothing selected to indent")
            return
        lines = txt.splitlines()
        lines2 = ['    '+line for line in lines]
        joined = '\u2029'.join(lines2)
        tc.insertText(joined)
        self.setModified(self.editorList.currentItem().text(), old_text, "Indent >>", self.getTC(tc))
        tc.movePosition(QtGui.QTextCursor.Up, QtGui.QTextCursor.KeepAnchor, len(lines2)-1)
        tc.movePosition(QtGui.QTextCursor.StartOfLine, QtGui.QTextCursor.KeepAnchor)
        self.currentEditor.setTextCursor(tc)

    def onIndentBackBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "Error")
            return
        self.currentEditor.setFocus()
        old_text = self.getText()
        old_cursor = self.currentEditor.textCursor()
        name = self.editorList.currentItem().text()
        tc = self.currentEditor.textCursor()
        txt = tc.selectedText()
        if not txt:
            self.toast("nothing selected to unindent")
            return
        lines = txt.splitlines()
        hasLeading = True
        for line in lines:
            if not line[:4] == '    ':
                hasLeading = False
        if not hasLeading:
            self.toast("Editor assistant: Cannot unindent selected block","Error")
            return
        lines2 = [line[4:] for line in lines]
        joined = '\u2029'.join(lines2)
        tc.insertText(joined)
        self.setModified(self.editorList.currentItem().text(), old_text, "<< Unindent", self.getTC(old_cursor))
        tc.movePosition(QtGui.QTextCursor.Up, QtGui.QTextCursor.KeepAnchor, len(lines2)-1)
        tc.movePosition(QtGui.QTextCursor.StartOfLine, QtGui.QTextCursor.KeepAnchor)
        self.currentEditor.setTextCursor(tc)

    def onReplaceAllBtnClicked(self, arg1):
        if self.matchWholeCheckBox.checkState():
            self.toast("Replace all does not work with Match word = checked","Error",10000)
            return
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "Error")
            return
        self.currentEditor.setFocus()
        name = self.editorList.currentItem().text()
        txt = self.findEdit.text()
        newTxt = self.replaceEdit.text()
        self.replace(name, txt, newTxt)

    def onReplaceBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "Error")
            return
        self.currentEditor.setFocus()
        document = self.currentEditor.document()
        name = self.editorList.currentItem().text()
        text_cursor = self.currentEditor.textCursor()
        txt = self.getText(name)
        start = text_cursor.selectionStart()
        end = text_cursor.selectionEnd()
        if start == end:
            self.toast("Nothing selected, press Find and try again")
            return
        txt1 = txt[:start]
        txt2 = txt[end:]
        newtxt = self.replaceEdit.text()
        newText = txt1 + newtxt + txt2
        self.setText(name,newText,f"replace {txt[start:end]}")
        text_cursor.setPosition(end)
        self.currentEditor.setTextCursor(text_cursor)
        self.onFindBtnClicked(True)

    def onRefreshBtnClicked(self, arg1):
        self.getEditors()
        self.toast(f"Refreshed","Information",1000,priority="low",log=False)
        self.editorDict = {}
        for zz in zip(self.editors, self.parents, self.grandparents):
            self.editorDict [zz[2].windowTitle()] = zz[0]
            #self.print(f"ed = {ed}")
        self.populateList()
        self.setCurrentEditor()

    def gotoLineActionTriggered(self):
        line = self.getFirstLine()
        self.gotoLine(line)

    def parseLine(self, line_as_string):
        try:
            parsed = int(line_as_string)
            return parsed
        except ValueError as ve:
            self.print(f"{ve}","Error")
            return 0

    def getFirstLine(self):
        """gets first line in the Goto line edit"""
        if not self.gotoLineEdit.text():
            return 0
        else:
            lines = self.gotoLineEdit.text().split(',')
            if lines:
                return self.parseLine(lines[0])
            else:
                self.toast("Unable to parse lines","Error")
                return 0

    def getGotoLines(self):
        if not self.gotoLineEdit.text():
            return []
        lines = self.gotoLineEdit.text().split(',')
        parsed = [self.parseLine(line) for line in lines if self.parseLine(line)]
        return parsed

    def onGotoLineEditTextChanged(self, arg1):
        """save the goto line edit text for each editor"""
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        if not name:
            return
        self.gotoLineDict[name] = arg1

    def makeGotoMenu(self):
        gotoMenu = QtGui.QMenu("Goto")
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text() if self.editorList.count() else ""
        if not curName:
            self.toast("No current editor","Error")

        lineNumsMenu = QtGui.QMenu("Line numbers")
        lineNums = self.getGotoLines()
        def makeLambda(x): return lambda: self.gotoLine(x)
        gotoLineLambdas = [makeLambda(lineNum) for lineNum in lineNums]
        gotoLineActions = []
        for ii,lineNum in enumerate(lineNums):
            gotoLineActions.append(QtGui.QAction(f"Go to line {lineNum}", mw))
            gotoLineActions[-1].triggered.connect(gotoLineLambdas[ii])
            gotoLineActions[-1].setEnabled(len(self.gotoLineEdit.text()) > 0)
            #gotoMenu.addAction(gotoLineActions[-1])
            lineNumsMenu.addAction(gotoLineActions[-1])
        gotoMenu.addMenu(lineNumsMenu)
        if not gotoLineLambdas:
            lineNumsMenu.setEnabled(False)

        #classDefLines = (class name, def/class text, line number)
        classDefLinesMenu = QtGui.QMenu("Class/Def lines")
        classDefLines = sorted(self.getClassDefLines())
        classDefLineActions = []
        classDefLineLambdas = [makeLambda(cl[2]) for cl in classDefLines]
        for ii,classDefLine in enumerate(classDefLines):
            if "class" in classDefLine[1]:
                classDefLineActions.append(QtGui.QAction(f"{classDefLine[1]} ({classDefLine[2]})", mw))
            else: #def line
                classDefLineActions.append(QtGui.QAction(f"({classDefLine[0]}) {classDefLine[1]} ({classDefLine[2]})", mw))
            classDefLineActions[-1].triggered.connect(classDefLineLambdas[ii])
            classDefLinesMenu.addAction(classDefLineActions[-1])
        gotoMenu.addMenu(classDefLinesMenu)
        if not classDefLineLambdas:
            classDefLinesMenu.setEnabled(False)

        bookmarks = sorted(self.getBookmarks())
        bookmarksMenu = QtGui.QMenu("Bookmarks")
        bookmarkActions = []
        bookmarkLambdas = [makeLambda(bm[1]) for bm in bookmarks]
        for ii,bm in enumerate(bookmarks):
            bookmarkActions.append(QtGui.QAction(f"{bm[0]} ({bm[1]})", mw))
            bookmarkActions[-1].triggered.connect(bookmarkLambdas[ii])
            bookmarksMenu.addAction(bookmarkActions[-1])
        gotoMenu.addMenu(bookmarksMenu)
        if not bookmarks:
            bookmarksMenu.setEnabled(False)

        findResults = sorted(self.getFindResults())
        findResultsMenu = QtGui.QMenu("Find results")
        findResultActions = []
        findResultLambdas = [makeLambda(fr[1]) for fr in findResults]
        for ii,fr in enumerate(findResults):
            findResultActions.append(QtGui.QAction(f"{fr[0]} ({fr[1]})", mw))
            findResultActions[-1].triggered.connect(findResultLambdas[ii])
            findResultsMenu.addAction(findResultActions[-1])
        gotoMenu.addMenu(findResultsMenu)
        if not findResults:
            findResultsMenu.setEnabled(False)
        else:
            if self.matchWholeCheckBox.checkState():
                self.toast("Whole words checkbox ignored in Find results menu","Warning")

        findSelResults = sorted(self.getFindResults(useSelection=True))
        findSelResultsMenu = QtGui.QMenu("Find selection results")
        findSelResultActions = []
        findSelResultLambdas = [makeLambda(fsr[1]) for fsr in findSelResults]
        for ii,fsr in enumerate(findSelResults):
            findSelResultActions.append(QtGui.QAction(f"{fsr[0]} ({fsr[1]})", mw))
            findSelResultActions[-1].triggered.connect(findSelResultLambdas[ii])
            findSelResultsMenu.addAction(findSelResultActions[-1])
        gotoMenu.addMenu(findSelResultsMenu)
        if not findSelResults:
            findSelResultsMenu.setEnabled(False)
        else:
            if self.matchWholeCheckBox.checkState():
                self.toast("Whole words checkbox ignored in Find selection results menu","Warning")
        return gotoMenu


    def onGotoMenuBtnClicked(self, arg1):

        gotoMenu = self.makeGotoMenu()
        gotoMenu.exec_(self.gotoMenuBtn.mapToGlobal(QtCore.QPoint()))


    def onGotoLineEditReturnPressed(self):
        lines = self.getGotoLines()
        if len(lines) == 1:
            self.gotoLine(lines[0])
        else:
            self.onGotoMenuBtnClicked(True)

    def gotoLine(self,line,silent=False,eol=False):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor):
            self.toast("No valid current editor","Error")
            return
        document = self.currentEditor.document()
        if line < 0:
            txt = self.getText()
            txt_lines = txt.splitlines()
            txt_len = len(txt_lines)
            line = txt_len + 1 + line
        text_block = document.findBlockByLineNumber(line-1)
        if not text_block.isValid():
            self.toast(f"Cannot goto Line# {line} of {self.editorList.currentItem().text()}")
            return
        text_cursor = self.currentEditor.textCursor()
        text_cursor.setPosition(text_block.position())
        if eol:
            text_cursor.movePosition(QtGui.QTextCursor.EndOfLine)
        self.currentEditor.setTextCursor(text_cursor)
        self.currentEditor.centerCursor()
        if not silent:
            self.toast(f"Goto Line #{line} of {self.editorList.currentItem().text()}","Message")

    def getLines(self,name=None):
        """get plain text as string list"""
        txt = self.getText(name)
        return txt.splitlines()

    def getTrimmedLines(self, name=None):
        """remove all leading whitespace"""
        lines = self.getLines(name)
        lines2 = []
        for line in lines:
            lines2.append(line.strip())
        return lines2

    def getFindResults(self, useSelection=False):
        lines = self.getTrimmedLines()
        findResults = []
        if not shiboken.isValid(self.currentEditor):
            return
        selTxt = self.currentEditor.textCursor().selectedText() if self.currentEditor else ""
        find = self.findEdit.text() if not useSelection else selTxt
        description_range = 35
        if not find:
            return []
        matchCase = self.matchCaseCheckBox.checkState()
        if not matchCase:
            find = find.lower()
        for ii,line in enumerate(lines):
            if find in line or bool(not matchCase and find in line.lower()):
                idx = line.find(find) if matchCase else line.lower().find(find)
                if len(line) - description_range > idx:
                    desc = line[idx:idx+description_range]
                else:
                    desc = line[idx:]
                findResults.append(tuple([desc, ii+1]))
        return findResults

    def getBookmarks(self):
        lines = self.getTrimmedLines()
        bookmarks = []
        for ii,line in enumerate(lines):
            if BOOKMARK_MARKER in line:
                descIdx = line.find(BOOKMARK_MARKER) + len(BOOKMARK_MARKER)
                desc = line[descIdx:].strip()
                if desc:
                    bookmarks.append(tuple([desc, ii+1]))
        return bookmarks

    def getClassDefLines(self):
        """tuple(class name, class/def line, line number)"""
        lines = self.getTrimmedLines()
        classDefLines = []
        curClass = ""
        for ii,line in enumerate(lines):
            if "class " in line and ":" in line:
                idx = line.find("class ")
                idx2 = line.find(":", idx)
                curClass = line[idx + len("class "):idx2]
                if "(" in curClass and ")" in curClass:
                    idx3 = curClass.find("(")
                    idx4 = curClass.find(")",idx3)
                    if idx4 > idx3:
                        curClass = curClass[:idx3]
                    else:
                        curClass = ""
                classDefLines.append(tuple([curClass, line[idx:idx2], ii+1]))
            elif "def " in line and ":" in line:
                idx = line.find("def ")
                idx2 = line.find(":", idx)
                classDefLines.append(tuple([curClass, line[idx:idx2], ii+1]))
        return classDefLines

    def populateList(self):
        self.blockSignals = True
        current = None
        if not shiboken.isValid(self.editorList):
            return
        if self.editorList.count() != 0:
            current = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        self.editorList.clear()
        for k in sorted(self.editorDict.keys()):
            self.editorList.addItem(k)

        if current and current in self.editorDict:
            items = self.editorList.findItems(current, QtCore.Qt.MatchExactly)
            self.editorList.setCurrentItem(items[0] if items else self.editorList.item(0))
            pass
        else:
            self.editorList.setCurrentRow(0)

        self.setCurrentEditor()
        self.blockSignals = False

    def print(self,message,type="Message"):
        if type == "Message" or type == "Information":
            FreeCAD.Console.PrintMessage(message+"\n")
        elif type == "Error":
            FreeCAD.Console.PrintError(message+"\n")
        elif type == "Warning":
            FreeCAD.Console.PrintWarning(message+"\n")

    def getStandardButtons(self):
        return int(QtGui.QDialogButtonBox.Close)

    def reject(self):
        FreeCADGui.Control.closeDialog()
        if FreeCADGui.activeDocument():
            FreeCADGui.activeDocument().resetEdit()

class DiffSaver (QtGui.QDialog):
    def __init__(self, parent=mw, form=None, plainText=None, snapText=None, label1=None, label2=None):
        super(DiffSaver, self).__init__(parent, QtCore.Qt.Tool)
        self.form=form
        self.slider=None
        self.webView=None
        self.widthSlider=None
        self.contextCheckBox = None
        self.numlinesSpinBox = None
        self.plainText = plainText
        self.snapText = snapText
        self.label1 = label1
        self.label2 = label2
        self.diff = ""
        self.makeDiff()
        self.blockSignals = False


    def setMaxWidthString(self, width=None):
        if not self.webView:
            return
        colWidth = width if width else self.width()/2-70
        MAXWIDTH=f"{colWidth}" #chr(123) = {, 125 = }
        width_string= f"<style>table td {chr(123)}overflow:auto;max-width:{MAXWIDTH}px;word-wrap:break-word;{chr(125)}</style></head>"
        new_diff = self.diff.replace("</head>",width_string)
        self.webView.setHtml(new_diff)

    def onContextCheckBoxStateChanged(self, arg1):
        self.makeDiff()
        self.setMaxWidthString()

    def onNumlinesSpinBoxValueChanged(self, val):
        self.makeDiff()
        self.setMaxWidthString()

    def makeDiff(self):
        """make the diff, expensive operation should only be done when necessary"""
        d = difflib.HtmlDiff(tabsize=4)
        numlines2 = 5 if not self.numlinesSpinBox else self.numlinesSpinBox.value()
        context2 = self.contextCheckBox.checkState() if self.contextCheckBox else True
        self.diff = d.make_file(self.snapText, self.plainText, context=context2, numlines=numlines2)

    def updateTitle(self):
        if self.widthSlider and self.slider:
            self.setWindowTitle(f"Ea v{__version__} Diff Saver zoom:{self.slider.value()}%; Col width: {self.widthSlider.value()}px")

    def onResize(self, event):
        self.blockSignals = True
        width = self.width()/2-70
        self.widthSlider.setValue(width)
        self.setColWidth(width)

    def onSliderValueChanged(self, value):
        if self.blockSignals:
            self.blockSignals = False
            return
        self.webView.setZoomFactor(value/100.0)
        self.updateTitle()

    def saveDiffToHtml(self):
        fname = QtGui.QFileDialog.getSaveFileName(FreeCADGui.getMainWindow(),"Save diff to html file",filter='*.html')[0]
        if not fname:
            return
        with open(fname,"w") as outfile:
            outfile.write(self.diff)
        self.form.toast(f"Diff saved to {fname}","Message")

    def setColWidth(self, value):
        self.setMaxWidthString(value)
        self.updateTitle()

    def onWidthSliderValueChanged(self, value):
        self.setColWidth(value)


class Dockable (QtGui.QDockWidget):
    def __init__(self, parent=mw):
        super(Dockable,self).__init__(parent, QtCore.Qt.Tool)
        self.dlg = TaskEditorAssistant()
        self.setObjectName("Editor assistant dockwidget")
        QtGui.QDockWidget.setWindowIcon(self, QIconFromXPMString(__icon__))
        self.setWidget(self.dlg.form)
        self.setWindowTitle(f"Editor assistant v{__version__}")
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)

def QIconFromXPMString(xpm_string):
    xpm = xpm_string.replace("\"","").replace(',','').splitlines()[4:-1]
    pixmap = QtGui.QPixmap(xpm)
    icon = QtGui.QIcon(pixmap)
    return icon

def QIconFromStandard(name):
    pixmap = getattr(QtGui.QStyle,name)
    icon = QtGui.QPushButton().style().standardIcon(pixmap)
    return icon

def showEditorAssistantAsDockWidget():
    dockWidget = Dockable(mw)
    #dockWidget.show()
    mw.addDockWidget(QtCore.Qt.LeftDockWidgetArea, dockWidget)

def showEditorAssistantDialog():
    '''show the editor assistant dialog'''
    #dlg = TaskEditorAssistant()
    #dw = Dockable(mw)
    dlg = TaskEditorAssistant()
    comboView = mw.findChild(QtGui.QDockWidget,"Combo View")
    tabWidget = None
    if comboView:
        tabWidget = comboView.findChild(QtGui.QTabWidget)
    if tabWidget:
        tabWidget.addTab(dlg.form,f"Editor assistant v{__version__}")
        dlg.isTabbed = True
        tabWidget.setCurrentWidget(dlg.form)
        if not comboView.isVisible():
            FreeCAD.Console.PrintWarning("Editor assistant: Making Combo View visible\n")
            FreeCAD.Console.PrintMessage("Tip: press Alt while executing to open as dockable widget\n")
            comboView.setVisible(True)
    elif not FreeCADGui.Control.activeDialog():
        FreeCADGui.Control.showDialog(dlg.form)
    else:
        FreeCAD.Console.PrintError("Another task dialog is active.  Showing as dockable widget instead.\n")
        showEditorAssistantAsDockWidget()

__icon__="""
/* XPM */
static char *_647719150564[] = {
/* columns rows colors chars-per-pixel */
"64 64 7 1 ",
"  c black",
". c #EDED1C1C2424",
"X c #2222B1B14C4C",
"o c #FFFFC9C90E0E",
"O c #3F3F4848CCCC",
"+ c #DFDFDFDFDFDF",
"@ c None",
/* pixels */
"                                                   @@@@@@@@@@@@@",
"                                                   @@@@@@@@@@@@@",
"                                                    @@@@@@@@@@@@",
"                                                     @@@@@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++      @@@@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++       @@@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++        @@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +     @@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++     @@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +++     @@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++++     @@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +++++     @@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++++++     @@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +++++++     @",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++++++++    @",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++                ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++                ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++                ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++++++++++++++    ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"                                                                ",
"                                                                ",
"                                                                ",
"                                                                "
};

"""

undo_icon = """
/* XPM */
static char *edit_undo_XPM[] = {
/* columns rows colors chars-per-pixel */
"64 64 7 1",
"   c None",
".  c #FF8000",
"+  c #FFFF80",
"@  c #666666",
"#  c #FFFF00",
"$  c #FF8080",
"%  c None",
/* pixels */
"                                                                ",
"                                                                ",
"                            ..                                  ",
"                            ...                                 ",
"                          .....                                 ",
"                         ......                                 ",
"                        ...+...                                 ",
"                        ..++...                                 ",
"                      ...+++...                                 ",
"                     ...++++...                                 ",
"                    ...+++++...                                 ",
"                    ..++++++...                                 ",
"                  ...+++++++...                                 ",
"                ....++++++++...                                 ",
"               ...++++++++++...                                 ",
"              ...+++++++++++.@.                                 ",
"             ...++++++++++++...........                         ",
"            ...+++++++++++++.+++++++.....                       ",
"           ...++++++++++++++++++++++++++....                    ",
"          ...+++++++++++++++++++#+++++++....                    ",
"         ...++++++++++++++++++########+++++...                  ",
"        ...++++++++++++++++++##########+++++...                 ",
"       ...+++++++++++++++++##############++++...                ",
"      ....++++++++++++++++################++++..                ",
"      ...+++++++++++++++####################+++...              ",
"      ....++++++++++++++####################++++...             ",
"       ....++++++++++++######################+++#...            ",
"         ...+++++++++++#######################++##..            ",
"          ...+++++++++##########################++..            ",
"           ...+++++++#######++++++++############++..            ",
"            ...++++#########++++++++++++########++..            ",
"             ....+++########++....++++++########+++.            ",
"                ..++++######++.. .....++++#######++...          ",
"                ...++++#####++..  .....++++######++...          ",
"                 ...++++####++..     ...++++#####++...          ",
"                  ...+++####++..      ...+++#####++...          ",
"                   ...++++##++..        ..$+++###++...          ",
"                    ...++++#++..        ...+++###++...          ",
"                     ...++++++..         ..#++###++...          ",
"                      ...+++++..         ...++###++...          ",
"                        ..++++..          ..++###++...          ",
"                        %$.++#.$%   %  %  ..+++##++..           ",
"               %    %%  %%$.##.$%%%%%%%%  +.+++#+++.            ",
"              %%    %%% %%%....$%%%%%%%% %%.+++#+++.            ",
"            %%  %%%%%%%%%%%%....%%%%%%%%%%%.++##++..            ",
"           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.++#++#.. %%         ",
"        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.++++++...%%%        ",
"        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++...%%%%%        ",
"    %%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..+++++..%%%%%         ",
"    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++++.%%%%%%%%%% %%  ",
"   %%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++++..%%%%%%%%%%%%%  ",
"  %%%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%...++++++..%%%%%%% %%%%    ",
"     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..+++++++..%%%%%%%%% %%     ",
"     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++++...%%%%%%%%%  %%     ",
"    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..+++++...%%%%%%%%%%%%%%%     ",
"    %%%% %%%%%%%%%%%%%%%%%%%%%%%%..++++...%%%%%%%%% %%%%%%      ",
"         %%%%%%%%%%%%%%%%%%%%%%%%.......%%%%%%%%%%%%%%% %%      ",
"         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %       ",
"         %%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %           ",
"              %%  %%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%              ",
"                 %%   %%%%  %%%%%%%% %%%                        ",
"                 %%    %%%% %%%%%%%%  %%                        ",
"                         %%     %                               ",
"                                                                "
};
"""
redo_icon = """
/* XPM */
static char *edit_redo_XPM[] = {
/* format */
"64 64 7 1",
"   c None",
".  c #FF8000",
"+  c #FFFF80",
"@  c #666666",
"#  c #FFFF00",
"$  c #FF8080",
"%  c None",
/* pixels */
"                                                                ",
"                                                                ",
"                                  ..                            ",
"                                 ...                            ",
"                                 .....                          ",
"                                 ......                         ",
"                                 ...+...                        ",
"                                 ...++..                        ",
"                                 ...+++...                      ",
"                                 ...++++...                     ",
"                                 ...+++++...                    ",
"                                 ...++++++..                    ",
"                                 ...+++++++...                  ",
"                                 ...++++++++....                ",
"                                 ...++++++++++...               ",
"                                 .@.+++++++++++...              ",
"                         ...........++++++++++++...             ",
"                       .....+++++++.+++++++++++++...            ",
"                    ....++++++++++++++++++++++++++...           ",
"                    ....+++++++#+++++++++++++++++++...          ",
"                  ...+++++########++++++++++++++++++...         ",
"                 ...+++++##########++++++++++++++++++...        ",
"                ...++++##############+++++++++++++++++...       ",
"                ..++++################++++++++++++++++....      ",
"              ...+++####################+++++++++++++++...      ",
"             ...++++####################++++++++++++++....      ",
"            ...#+++######################++++++++++++....       ",
"            ..##++#######################+++++++++++...         ",
"            ..++##########################+++++++++...          ",
"            ..++############++++++++#######+++++++...           ",
"            ..++########++++++++++++#########++++...            ",
"            .+++########++++++....++########+++....             ",
"          ...++#######++++..... ..++######++++..                ",
"          ...++######++++.....  ..++#####++++...                ",
"          ...++#####++++...     ..++####++++...                 ",
"          ...++#####+++...      ..++####+++...                  ",
"          ...++###+++$..        ..++##++++...                   ",
"          ...++###+++...        ..++#++++...                    ",
"          ...++###++#..         ..++++++...                     ",
"          ...++###++...         ..+++++...                      ",
"          ...++###++..          ..++++..                        ",
"           ..++##+++..  %  %   %$.#++.$%                        ",
"            .+++#+++.+  %%%%%%%%$.##.$%%  %%    %               ",
"            .+++#+++.%% %%%%%%%%$....%%% %%%    %%              ",
"            ..++##++.%%%%%%%%%%%....%%%%%%%%%%%%  %%            ",
"         %% ..#++#++.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%           ",
"        %%%...++++++.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        ",
"        %%%%%...++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        ",
"         %%%%%..+++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%    ",
"  %% %%%%%%%%%%.++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ",
"  %%%%%%%%%%%%%..++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%   ",
"    %%%% %%%%%%%..++++++...%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%%  ",
"     %% %%%%%%%%%..+++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     ",
"     %%  %%%%%%%%%...++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     ",
"     %%%%%%%%%%%%%%%...+++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ",
"      %%%%%% %%%%%%%%%...++++..%%%%%%%%%%%%%%%%%%%%%%%% %%%%    ",
"      %% %%%%%%%%%%%%%%%.......%%%%%%%%%%%%%%%%%%%%%%%%         ",
"       %  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         ",
"           % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%         ",
"              %%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%  %%              ",
"                        %%% %%%%%%%%  %%%%   %%                 ",
"                        %%  %%%%%%%% %%%%    %%                 ",
"                               %     %%                         ",
"                                                                "
};
"""
indent_icon = """
/* XPM */
static char *indent_xpm[] = {
/* format */
"64 64 9 1",
"   c None",
".  c black",
"+  c #DFDFDF",
"@  c #3F48CC",
"#  c green",
"$  c #3F48CC",
"%  c black",
"&  c #ED1C24",
"*  c #E2D9D6",
/* pixels */
"...................................................             ",
"...................................................             ",
"....................................................            ",
".....................................................           ",
"....++++++++++++++++++++++++++++++++++++++++++++......          ",
"....++++++++++++++++++++++++++++++++++++++++++++.......         ",
"....++++++++++++++++++++++++++++++++++++++++++++........        ",
"....++++++++++++++++++++++++++++++++++++++++++++...+.....       ",
"....++++++++++++++++++++++++++++++++++++++++++++...++.....      ",
"....++++++++++++++++++++++++++++++++++++++++++++...+++.....     ",
"....++++++++++++++++++++++++++++++++++++++++++++...++++.....    ",
"....++++++++++++++++++++++++++++++++++++++++++++...+++++.....   ",
"....++++++++++++++++++++++++++++++++++++++++++++...++++++.....  ",
"....++++++++++++++++++++++++++++++++++++++++++++...+++++++..... ",
"....++++++++++++++++++++++++++++++++++++++++++++...++++++++.... ",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++................",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++................",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++................",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++....",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....+++....+++++++++++++++++++++++++++++++++++++++++++++++++....",
"....+++.....++++++++++++++++++++++++++++++++++++++++++++++++....",
"....+++..$$..++++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$...++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$$$...++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++..$$$$$$...++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++..$$$$$$$...++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++++..$$$$$$$...+++++++++++++++++++++++++++++++++++++....",
"....+++++++++..$$$$$$...++++++++++++++++++++++++++++++++++++....",
"....+++++++++++..$$$$$$..+++++++++++++++++++++++++++++++++++....",
"....+++++++++++++..$$$$$$..+++++++++++++++++++++++++++++++++....",
"....+++++++++++++++..$$$$$..++++++++++++++++++++++++++++++++....",
"....+++++++++++++++++..$$$$..+++++++++++++++++++++++++++++++....",
"....++++++++++++++++++..$$$$..+++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++++..$$$$..+++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++++..$$$$..+++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++..$$$$$..++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++++++++++++..$$$$$..+++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++++++++++..$$$$$$..+++++++++++++++++++++++++++++++++....",
"....+++++++++++..$$$$$$$..++++++++++++++++++++++++++++++++++....",
"....+++++++++..$$$$$$$..++++++++++++++++++++++++++++++++++++....",
"....+++++++..$$$$$$$$..+++++++++++++++++++++++++++++++++++++....",
"....+++++..$$$$$$$$..+++++++++++++++++++++++++++++++++++++++....",
"....++++..$$$$$$$..+++++++++++++++++++++++++++++++++++++++++....",
"....+++..$$$$$$..++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$$..++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$..+++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++.....+++++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++...++++++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"................................................................",
"................................................................",
"................................................................",
"................................................................"};

"""
replace_icon = """
/* XPM */
static char *_647894170722[] = {
/* columns rows colors chars-per-pixel */
"64 64 9 1 ",
"  c black",
". c #2B0000",
"X c #2B2B00",
"o c gray17",
"O c #552B2B",
"+ c #3F48CC",
"@ c #C3C3C3",
"# c #FFFFD4",
"$ c None",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@+++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@++++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@+++++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@@$$@@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@@+++++++++++++++++++++++++++@@$$@@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@++++++++++++++++++++++++++++@@$$@@               @@$$$",
"$$$$@@@@@+++++++++++@@@@@@@@@@@@@@@@@@@@$$@@               @@$$$",
"$$$$@@@@@++++++++++@@@@@@@@@@@@@@@@@@@@@$$@@               @@$$$",
"$$$$@@@@@+++++++++@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@#$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@#$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@#$$",
"$$$$@++++++++++++++++@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@               @@$$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@               @@$$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@               @@$$$",
"$$$$@@@@+++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@    XO@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@          .@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@             @@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@               @@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@     .@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@      @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     .@@@@@@@     @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@@     @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@      @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@                @@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@              @@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@           @@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@o    .o@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
};

"""
find_previous_icon = """
/* XPM */
static char *_647896432515[] = {
/* columns rows colors chars-per-pixel */
"64 64 8 1 ",
"  c black",
". c #ED1C24",
"X c #22B14C",
"o c #FFC90E",
"O c #3F48CC",
"+ c #7A82DC",
"@ c #DFDFDF",
"# c None",
"################################################################",
"################################################################",
"#######                            #############################",
"######                               ###########################",
"#####   @@@@@@@@@@@@@@@@              ##########################",
"####  @ @@@@@@@@@@@@@@@                 ########################",
"###  @@ @@@@@@@@@@@@@@                   #######################",
"##  @@@ @@@@@@@@@@@@@@       +++++       #######################",
"#  @@@@ @@@@@@@@@@@@@       +++++++       ######################",
"        @@@     XXXXX     ++++++++++      ######################",
"        @@@     XXXX      +++++++++++      #####################",
"  @@@@@@@@@     XXXX     +++++++++++++     #####################",
"  @@@@@@@@@@@@@@@@@      +++++++++++++      ####################",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ####################",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ####################",
"  @@@@@XXX    ....     +++++++++++++++++     ###################",
"  @@@@@XXX    ....     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@     +++++++++++++++++     ###################",
"  @@@@@   XXXXXOOX     +++++++++++++++++     ###################",
"  @@@@@   XXXXXOOX     +++++++++++++++++     ###################",
"  @@@@@   XXXXXOOX     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ###############OOO##",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ##############OOOOO#",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ##############OOOOO#",
"  @@@@@OOOOOOOooo        +++++++++++++      ############OOOOOOO#",
"  @@@@@OOOOOOOooo         +++++++++++      ############OOOOOOOO#",
"  @@@@@@@@@@@@@@@@@@      +++++++++++      ############OOOOOOO##",
"  @@@@@@@@@@@@@@@@@@@      +++++++++      #############OOOOOOO##",
"  @@@@@@@@@@@@@@@@@@@        +++++       ##############OOOOOOO##",
"  @@@@@@@@@@@@@@@@@@@@                   ##############OOOOOOO##",
"                                        ##############OOOOOOOO##",
"                                      ################OOOOOOOO##",
"##########################           #################OOOOOOO###",
"############################       ###################OOOOOOO###",
"#############################     ####################OOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ##################OOOOOOOO####",
"#############################     #################OOOOOOOOO####",
"#############################     #################OOOOOOOOO####",
"#############################     ###############OOOOOOOOOOO####",
"#############################     #############OOOOOOOOOOOO#####",
"#####################OOO######################OOOOOOOOOOOOO#####",
"##################OOOOOOO####################OOOOOOOOOOOOO######",
"##############OOOOOOOOOOOO##################OOOOOOOOOOOOOO######",
"###########OOOOOOOOOOOOOOO##################OOOOOOOOOOOOO#######",
"########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO########",
"####OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO########",
"###OOOOOOOOOOOOOOO###OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#########",
"##OOOOOOOOOOOOO#######OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO##########",
"##OOOOOOOOOOOOO#######OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO############",
"###OOOOOOOOOOOOOOO###OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#############",
"####OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO##############",
"#######OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO################",
"###########OOOOOOOOOOOOOOOO#####################################",
"##############OOOOOOOOOOOO######################################",
"#################OOOOOOOO#######################################",
"#####################OOO########################################",
"################################################################",
"################################################################"
};
"""
find_next_icon = """
/* XPM */
static char *_647896407113[] = {
/* columns rows colors chars-per-pixel */
"64 64 8 1 ",
"  c black",
". c #ED1C24",
"X c #22B14C",
"o c #FFC90E",
"O c #3F48CC",
"+ c #7A82DC",
"@ c #DFDFDF",
"# c None",
"################################################################",
"################################################################",
"#############################           ########################",
"###########################                               ######",
"##########################              @@@@@@@@@@@@@@@@   #####",
"########################                 @@@@@@@@@@@@@@@ @  ####",
"#######################                   @@@@@@@@@@@@@@ @@  ###",
"#######################       +++++       @@@@@@@@@@@@@@ @@@  ##",
"######################       +++++++       @@@@@@@@@@@@@ @@@@  #",
"######################      ++++++++++     XXXXX     @@@        ",
"#####################      +++++++++++      XXXX     @@@        ",
"#####################     +++++++++++++     XXXX     @@@@@@@@@  ",
"####################      +++++++++++++      @@@@@@@@@@@@@@@@@  ",
"####################     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"####################     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     ....    XXX@@@@@  ",
"###################     +++++++++++++++++     ....    XXX@@@@@  ",
"###################     +++++++++++++++++     @@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     @@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     @@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     XOOXXXXX   @@@@@  ",
"###################     +++++++++++++++++     XOOXXXXX   @@@@@  ",
"###################     +++++++++++++++++     XOOXXXXX   @@@@@  ",
"##OOO###############     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"#OOOOO##############     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"#OOOOO##############     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"#OOOOOOO############      +++++++++++++        oooOOOOOOO@@@@@  ",
"#OOOOOOOO############      +++++++++++         oooOOOOOOO@@@@@  ",
"##OOOOOOO############      +++++++++++      @@@@@@@@@@@@@@@@@@  ",
"##OOOOOOO#############      +++++++++      @@@@@@@@@@@@@@@@@@@  ",
"##OOOOOOO##############       +++++        @@@@@@@@@@@@@@@@@@@  ",
"##OOOOOOO##############                   @@@@@@@@@@@@@@@@@@@@  ",
"##OOOOOOOO##############                                        ",
"##OOOOOOOO################                                      ",
"###OOOOOOO#################           ##########################",
"###OOOOOOO###################       ############################",
"###OOOOOOO####################     #############################",
"###OOOOOOOO###################     #############################",
"###OOOOOOOO###################     #############################",
"###OOOOOOOO###################     #############################",
"###OOOOOOOO###################     #############################",
"####OOOOOOOO##################     #############################",
"####OOOOOOOOO#################     #############################",
"####OOOOOOOOO#################     #############################",
"####OOOOOOOOOOO###############     #############################",
"#####OOOOOOOOOOOO#############     #####OOOO####################",
"#####OOOOOOOOOOOOO######################OOOO####################",
"######OOOOOOOOOOOOO####################OOOOOOOO#################",
"######OOOOOOOOOOOOOO##################OOOOOOOOOOOOO#############",
"#######OOOOOOOOOOOOOOO##############OOOOOOOOOOOOOOOOOO##########",
"########OOOOOOOOOOOOOOO###########OOOOOOOOOOOOOOOOOOOOOOO#######",
"########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO####",
"#########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO###OOOOOOOOOOOOOOO###",
"##########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#######OOOOOOOOOOOOO##",
"############OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#######OOOOOOOOOOOOO##",
"#############OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO###OOOOOOOOOOOOOOO###",
"##############OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO####",
"################OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#######",
"##################OOOOO############OOOOOOOOOOOOOOOOOO###########",
"######################################OOOOOOOOOOOOO#############",
"#######################################OOOOOOOOO################",
"########################################OOOO####################",
"########################################OOOO####################",
"################################################################"
};

"""
replace_all_icon = """
/* XPM */
static char *_647894950477[] = {
/* columns rows colors chars-per-pixel */
"64 64 9 1 ",
"  c black",
". c #2B0000",
"X c #2B2B00",
"o c gray17",
"O c #552B2B",
"+ c #3F48CC",
"@ c #C3C3C3",
"# c #FFFFD4",
"$ c None",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@+++++++++++++++++++++++@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@++++++++++++++++++++++++@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@+++++++++++++++++++++++++@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@   @@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@   @@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@@++++++++++++@@@@@@@@@@@@@@@@   @@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@+++++++++++++@@@@@              @@               @@$$$",
"$$$$@@@@@+++++++++++@@@@@@@@              @@               @@$$$",
"$$$$@@@@@++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@@@+++++++++@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@#$$",
"$$$$@@@@++++++++++@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@#$$",
"$$$$@@@++++++++++++@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@#$$",
"$$$$@++++++++++++++++@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@@@++++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@++++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@++++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@@+++++++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@++++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@      @     @@@@@@@@@@    XO@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@               @@@@@@@          .@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@                @@@@@@             @@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@                 @@@@@               @@@$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@       @@@@      @@@@@     .@@$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@       @@@      @@@@@@      @@$$$$$$$$$$$$$$$$$$",
"$$@@     .@@@@@@@      @@@     .@@@@@@@     @@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@@      @@@      @@@@@@@     @@$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@       @@@@      @@@@@      @@$$$$$$$$$$$$$$$$$$",
"$$@@@                  @@@@                @@@$$$$$$$$$$$$$$$$$$",
"$$@@@@                 @@@@@              @@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@               @@@@@@@           @@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@     . @     @@@@@@@@@o    .o@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
};
"""
unindent_icon = """
/* XPM */
static char * unindent_xpm[] = {
/* format */
"64 64 9 1",
"   c None",
"z  c #000000",
"+  c #DFDFDF",
"@  c #3F48CC",
"#  c #22B14C",
"x  c #3F48CC",
"%  c black",
"&  c #ED1C24",
"*  c #E2D9D6",
/* pixels */
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz              ",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz             ",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz            ",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz           ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzzzzz          ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzzzzzz         ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzzzzzzz        ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+zzzzz       ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++zzzzz      ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+++zzzzz     ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++++zzzzz    ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+++++zzzzz   ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++++++zzzzz  ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+++++++zzzzz ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++++++++zzzz ",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++zzzzzzzzzzzzzzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++zzzzzzzzzzzzzzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++zzzzzzzzzzzzzzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++++++++++++zz+++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++++zzzzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++zzxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++zzxxxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++zzxxxxxxxzz++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++zzxxxxxxxxzz+++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++zzxxxxxxxxzz++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++zzxxxxxxxxzz++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++zzxxxxxxxzz++++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++zzxxxxxxxzz++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++zzxxxxxxzz++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++zzxxxxxxzz+++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++zzxxxxzz+++++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++zzxxxxxzz++++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++zzxxxxxzzz++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++zzxxxxxxzz+++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++zzxxxxxxxzz+++++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++zzzxxxxxxzzz+++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++zzzxxxxxxzz++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++zzzxxxxxxzz+++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++zzzzxxxxxxzz+++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++++zzzzxxxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++zzzzxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++zzxxxxzz++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzxxxzz++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++++zzxxzz++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++++zzzzz++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++zzz+++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"};
"""
snapshot_icon = """
/* XPM */
static char *_647898900207[] = {
/* columns rows colors chars-per-pixel */
"64 64 3 1 ",
"  c gray4",
". c gray85",
"X c None",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX....................                 .....................XXXX",
"XX....................                 .....................XXXX",
"XX....................                 .....................XXXX",
"XX..................                     ...................XXXX",
"XX..................                     ...................XXXX",
"XX.........                                       ..........XXXX",
"XX.......                                            .......XXXX",
"XX.....                                               ......XXXX",
"XX....                                                 .....XXXX",
"XX....                                                  ....XXXX",
"XX...                                                   ....XXXX",
"XX...                                                    ...XXXX",
"XX...                       ......                       ...XXXX",
"XX...                     ..........                     ...XXXX",
"XX...                   ..............                   ...XXXX",
"XX...                  ................                  ...XXXX",
"XX...                 ..................                 ...XXXX",
"XX...                 ...................                ...XXXX",
"XX...                .........   ........                ...XXXX",
"XX...                .......       ......                ...XXXX",
"XX...               ........       .......               ...XXXX",
"XX...               .......         ......               ...XXXX",
"XX...               .......         ......               ...XXXX",
"XX...               .......         ......               ...XXXX",
"XX...               ........       .......               ...XXXX",
"XX...                .......       .......               ...XXXX",
"XX...                .........   ........                ...XXXX",
"XX...                 ...................                ...XXXX",
"XX...                 ..................                 ...XXXX",
"XX...                  ................                  ...XXXX",
"XX...                   ..............                   ...XXXX",
"XX...                     ..........                     ...XXXX",
"XX...                       ......                       ...XXXX",
"XX...                                                    ...XXXX",
"XX...                                                   ....XXXX",
"XX...                                                   ....XXXX",
"XX....                                                  ....XXXX",
"XX.....                                                .....XXXX",
"XX......                                              ......XXXX",
"XX.......                                           ........XXXX",
"XX...........                                    ...........XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
};
"""

match_case_icon = """
/* XPM */
static char *_647901377770[] = {
/* columns rows colors chars-per-pixel */
"64 64 3 1 ",
"  c black",
"z c #C3C3C3",
"x c None",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzz          zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz              zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxzzzzzzzzzzzzzzzzzzzzxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxxzzzzzzzzzzzzzzzzzxxxxxxx",
"xxxxxxxxxzz       z        zzxxxxxxxxxxxzz           zzzzzxxxxxx",
"xxxxxxxxzz        z        zzxxxxxxxxzz                 zzzzxxxx",
"xxxxxxxxzz       zzz       zzxxxxxxxzz                   zzzxxxx",
"xxxxxxxxzz       zzz        zzxxxxxzz                    zzzxxxx",
"xxxxxxxzz        zzz        zzxxxxxzz                     zzxxxx",
"xxxxxxxzz        zzzz       zzxxxxzz         zzzzz        zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzz    zzzzzzz       zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzzzzzzzzzzzz        zzxxxx",
"xxxxxxzz        zzzzzz        zzxxxxxxxzzzzzz             zzxxxx",
"xxxxxzz                       zzxxxxxxzzz                 zzxxxx",
"xxxxxzz                       zzxxxxzz                    zzxxxx",
"xxxxxzz                        zzxxzz            zz       zzxxxx",
"xxxxzz                         zzxzz         zzzzzz       zzxxxx",
"xxxxzz                         zzxzz        zzzzzzz       zzxxxx",
"xxxxzz                          zzzz       zzzzzzz        zzxxxx",
"xxxzz                           zzzz        zzzzz         zzxxxx",
"xxxzz        zzzzzzzzzzz        zzzz                      zzxxxx",
"xxxzz        zzzzzzzzzzz         zzz                      zzxxxx",
"xxxzz        zzxxxxxxxzz         zzzz             z        zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzzz           zzz       zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzxxzz       zzzzz       zzxxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
};
"""
match_whole_word_icon = """
/* XPM */
static char *_647901969918[] = {
/* columns rows colors chars-per-pixel */
"64 64 3 1 ",
"  c black",
"z c #C3C3C3",
"x c None",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzz          zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz              zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxzzzzzzzzzzzzzzzzzzzzxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxxzzzzzzzzzzzzzzzzzxxxxxxx",
"xxxxxxxxxzz       z        zzxxxxxxxxxxxzz           zzzzzxxxxxx",
"xxxxxxxxzz        z        zzxxxxxxxxzz                 zzzzxxxx",
"xxxxxxxxzz       zzz       zzxxxxxxxzz                   zzzxxxx",
"xxxxxxxxzz       zzz        zzxxxxxzz                    zzzxxxx",
"xxxxxxxzz        zzz        zzxxxxxzz                     zzxxxx",
"xxxxxxxzz        zzzz       zzxxxxzz         zzzzz        zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzz    zzzzzzz       zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzzzzzzzzzzzz        zzxxxx",
"xxxxxxzz        zzzzzz        zzxxxxxxxzzzzzz             zzxxxx",
"xxxxxzz                       zzxxxxxxzzz                 zzxxxx",
"xxxxxzz                       zzxxxxzz                    zzxxxx",
"xxxxxzz                        zzxxzz            zz       zzxxxx",
"xxxxzz                         zzxzz         zzzzzz       zzxxxx",
"xxxxzz                         zzxzz        zzzzzzz       zzxxxx",
"xxxxzz                          zzzz       zzzzzzz        zzxxxx",
"xxxzz                           zzzz        zzzzz         zzxxxx",
"xxxzz        zzzzzzzzzzz        zzzz                      zzxxxx",
"xxxzz        zzzzzzzzzzz         zzz                      zzxxxx",
"xxxzz        zzxxxxxxxzz         zzzz             z        zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzzz           zzz       zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzxxzz       zzzzz       zzxxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
};
"""
modifiers = QtGui.QApplication.keyboardModifiers()
if modifiers == QtCore.Qt.AltModifier:
    showEditorAssistantAsDockWidget()
else:
    showEditorAssistantDialog()

