#Editor Assistant
#Adds some capabilities to the python editor
#as a new task panel dialog
#https://forum.freecadweb.org/viewtopic.php?f=22&t=67242
#2022, <TheMarkster> LGPL2.1 or later
__version__ = "1.21"
UNDO_QUEUE_MAX_SIZE = 100
SHOW_AS_TASK_DIALOG = False
BOOKMARK_MARKER = "##:"

from PySide import QtGui,QtCore
try:
    import shiboken2 as shiboken
except:
    shiboken = None
mw = FreeCADGui.getMainWindow()


class FindEdit (QtGui.QLineEdit):
    def __init__(self, parent=None, form=None):
        super(FindEdit, self).__init__()
        self.form = form
        self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.__contextMenu)
        self.installEventFilter(self)
        self.setToolTip("Double click to set text from current selection in editor")

    def eventFilter(self, watched, event):
        if watched == self and event.type() == QtCore.QEvent.MouseButtonDblClick:
            if shiboken.isValid(self.form.currentEditor) and self.form.currentEditor:
                sel = self.form.currentEditor.textCursor().selectedText()
                if sel:
                    self.setText(sel)
                else:
                    self.form.toast("Nothing selected in editor","error")
            else:
                self.form.toast("Editor is invalid","error")
        return QtGui.QLineEdit.eventFilter(self, watched, event)

    def __contextMenu(self):
        self._normalMenu = self.createStandardContextMenu()
        self._addCustomMenuItems(self._normalMenu)
        self._normalMenu.exec_(QtGui.QCursor.pos())

    def _addCustomMenuItems(self, menu):
        menu.addSeparator()
        action = QtGui.QAction("Use selected", self)
        action.triggered.connect(self.useSelected)
        action.setEnabled(self.form.currentEditor.textCursor().selectedText() != "")
        menu.addAction(action)
        actionClear = QtGui.QAction("Clear", self)
        actionClear.triggered.connect(self.clear)
        actionClear.setEnabled(len(self.text()))
        menu.addAction(actionClear)

    def clear(self):
        self.setText("")

    def useSelected(self):
        txt_cur = self.form.currentEditor.textCursor()
        txt = txt_cur.selectedText()
        self.setText(txt)


class TaskEditorAssistant:
    def __init__(self):
        #super(TaskEditorAssistant, self).__init__(mw, QtCore.Qt.Tool)
        self.found = False
        self.gotoLineDict = {} #to save goto line edit value for each editor
        self.editorDict = {}
        self.editors = []
        self.parents = []
        self.grandparents = []
        self.titles = []
        self.undoQueue = [] #dictionary list {reason, old_text, name, tc}
        self.redoQueue = [] #tc holds a tuple (start, end) of selected text position
        self.snaps = [] #dictionary list {reason, old_text, name, tc}
        self.currentEditor = None
        self.timers = [] #toasts use this
        self.lastToast = "No previous toasts"
        self.getEditors()
        self.blockSignals = False
        self.form = QtGui.QWidget()
        self.form.setObjectName("Editor assistant")
        self.form.setWindowTitle(" Editor assistant v"+__version__)
        self.form.setWindowIcon(QIconFromXPMString(__icon__))
        #self.print(f"self.editors = {self.editors}")
        for ed in self.editors:
            self.editorDict [ed.parent().parent().windowTitle()] = ed
        #self.print(f"self.editorDict = {self.editorDict}")
        self.layout = QtGui.QVBoxLayout()
        self.form.setLayout(self.layout)
        topLabelLayout = QtGui.QHBoxLayout()
        self.msgBtn = QtGui.QPushButton()
        self.msgBtn.clicked.connect(self.onMsgBtnClicked)
        self.msgBtn.setIcon(QIconFromStandard("SP_FileDialogInfoView"))
        self.msgBtn.setToolTip("Toast message area, click to see most recent message")

        topLabelLayout.addWidget(self.msgBtn)
        self.layout.addLayout(topLabelLayout)

        editorLayout = QtGui.QHBoxLayout()
        self.editorList = QtGui.QListWidget()
        self.editorList.currentItemChanged.connect(self.onEditorListCurrentItemChanged)
        self.editorList.setToolTip("Open editors, press Refresh to update")
        editorLayout.addWidget(self.editorList)
        self.layout.addLayout(editorLayout)
        self.populateList()

        refreshLayout = QtGui.QHBoxLayout()
        refreshBtn = QtGui.QPushButton("Refresh editors")
        refreshBtn.setToolTip("Refresh list of editors in the list widget above")
        refreshBtn.setIcon(QIconFromStandard("SP_BrowserReload"))
        refreshBtn.clicked.connect(self.onRefreshBtnClicked)
        refreshLayout.addWidget(refreshBtn)

        self.gotoLineEdit = QtGui.QLineEdit()
        self.gotoLineEdit.returnPressed.connect(self.onGotoLineEditReturnPressed)
        self.gotoLineEdit.textChanged.connect(self.onGotoLineEditTextChanged)
        self.gotoLineEdit.setPlaceholderText("Goto Line number")
        self.gotoMenuBtn = QtGui.QPushButton()
        self.gotoMenuBtn.setToolTip(f"Line numbers = comma separated lines in Goto line edit\n\
Bookmarks = lines with {BOOKMARK_MARKER} bookmark description")
        self.gotoMenuBtn.clicked.connect(self.onGotoMenuBtnClicked)
        self.gotoMenuBtn.setIcon(QIconFromStandard("SP_TitleBarUnshadeButton"))
        refreshLayout.addWidget(self.gotoMenuBtn)
        refreshLayout.addWidget(self.gotoLineEdit)
        self.layout.addLayout(refreshLayout)

        undoLayout = QtGui.QHBoxLayout()
        self.undoBtn = QtGui.QPushButton()
        self.undoBtn.setEnabled(False)
        undoLayout.addWidget(self.undoBtn)
        self.undoBtn.clicked.connect(self.onUndoBtnClicked)
        self.undoBtn.setIcon(QIconFromXPMString(undo_icon))
        self.undoClearBtn = QtGui.QPushButton()
        self.undoClearBtn.setIcon(QIconFromStandard("SP_DialogResetButton"))
        self.undoClearBtn.setMaximumWidth(48)
        self.undoClearBtn.setToolTip("Purge undo/redo queues.  Clears both queues.")
        self.undoClearBtn.clicked.connect(self.onUndoClearBtnClicked)
        self.undoClearBtn.setEnabled(False)
        undoLayout.addWidget(self.undoClearBtn)
        self.redoBtn = QtGui.QPushButton()
        self.redoBtn.setEnabled(False)
        undoLayout.addWidget(self.redoBtn)
        self.redoBtn.clicked.connect(self.onRedoBtnClicked)
        self.redoBtn.setIcon(QIconFromXPMString(redo_icon))
        self.redoBtn
        self.layout.addLayout(undoLayout)

        findEditLayout = QtGui.QHBoxLayout()
        #findEditLayout.addWidget(QtGui.QLabel("Find: "))
        self.findEdit = FindEdit(form=self)
        self.findEdit.setPlaceholderText("Find:")
        self.findEdit.returnPressed.connect(self.onFindEditReturnPressed)
        self.findEdit.textChanged.connect(self.onFindEditTextChanged)

        findEditLayout.addWidget(self.findEdit)
        self.findBtn = QtGui.QPushButton()
        self.findBtn.setIcon(QIconFromXPMString(find_next_icon))
        self.findBtn.setToolTip("Find next")
        self.findBtn.clicked.connect(self.onFindBtnClicked)
        self.findBackBtn = QtGui.QPushButton()
        self.findBackBtn.setIcon(QIconFromXPMString(find_previous_icon))
        self.findBackBtn.setToolTip("")
        self.findBackBtn.clicked.connect(self.onFindBackBtnClicked)
        findEditLayout.addWidget(self.findBtn)
        findEditLayout.addWidget(self.findBackBtn)
        self.layout.addLayout(findEditLayout)

        replaceEditLayout = QtGui.QHBoxLayout()
        #replaceEditLayout.addWidget(QtGui.QLabel("Replace: "))
        self.replaceEdit = FindEdit(form=self)
        self.replaceEdit.setPlaceholderText("Replace:")
        replaceEditLayout.addWidget(self.replaceEdit)
        self.replaceBtn = QtGui.QPushButton()
        self.replaceBtn.setToolTip("Replace current selection and find next")
        self.replaceBtn.clicked.connect(self.onReplaceBtnClicked)
        self.replaceBtn.setIcon(QIconFromXPMString(replace_icon))
        self.replaceAllBtn = QtGui.QPushButton()
        self.replaceAllBtn.setToolTip("Replace all")
        self.replaceAllBtn.setIcon(QIconFromXPMString(replace_all_icon))
        self.replaceAllBtn.clicked.connect(self.onReplaceAllBtnClicked)
        replaceEditLayout.addWidget(self.replaceBtn)
        replaceEditLayout.addWidget(self.replaceAllBtn)
        self.layout.addLayout(replaceEditLayout)

        flagsLayout = QtGui.QHBoxLayout()
        self.matchWholeCheckBox = QtGui.QCheckBox("Whole words")
        self.matchWholeCheckBox.setIcon(QIconFromXPMString(match_whole_word_icon))
        self.matchWholeCheckBox.setToolTip("Match whole words")
        self.matchWholeCheckBox.stateChanged.connect(self.onMatchWholeCheckBoxStateChanged)
        self.matchCaseCheckBox = QtGui.QCheckBox("Case")
        self.matchCaseCheckBox.setIcon(QIconFromXPMString(match_case_icon))
        self.matchCaseCheckBox.setToolTip("Match case")
        flagsLayout.addWidget(self.matchCaseCheckBox)
        flagsLayout.addWidget(self.matchWholeCheckBox)
        self.matchCaseCheckBox.stateChanged.connect(self.onFindEditTextChanged)
        self.layout.addLayout(flagsLayout)


        snapLayout = QtGui.QHBoxLayout()
        self.takeSnapBtn = QtGui.QPushButton()
        self.takeSnapBtn.setIcon(QIconFromXPMString(snapshot_icon))
        self.takeSnapBtn.setMaximumWidth(48)
        self.takeSnapBtn.setToolTip("Take a snapshot of the text")
        self.snapCenterBtn = QtGui.QPushButton()
        self.snapMenuBtn = QtGui.QPushButton()
        snapCenterBtnLayout = QtGui.QHBoxLayout()
        snapCenterBtnLayoutMargins = QtCore.QMargins(0,0,0,0)
        snapCenterBtnLayout.setContentsMargins(snapCenterBtnLayoutMargins)
        snapCenterBtnLayout.setSpacing(0)
        self.snapCenterBtn.setLayout(snapCenterBtnLayout)
        self.snapCenterBtn.setMaximumWidth(64)
        self.popSnapBtn = QtGui.QPushButton()
        self.popSnapBtn.setIcon(QIconFromStandard("SP_DialogResetButton"))
        self.popSnapBtn.clicked.connect(self.popSnap)
        self.popSnapBtn.setToolTip("Pop the latest snap and discard it")
        snapCenterBtnLayout.addWidget(self.popSnapBtn)
        snapCenterBtnLayout.addWidget(self.snapMenuBtn)
        self.snapMenuBtn.setIcon(QIconFromStandard("SP_TitleBarUnshadeButton"))
        self.snapMenuBtn.setToolTip("Snapshots menu")
        self.restoreSnapBtn = QtGui.QPushButton("Restore")
        self.takeSnapBtn.clicked.connect(self.onTakeSnapBtnClicked)
        self.snapMenuBtn.clicked.connect(self.onSnapMenuBtnClicked)
        self.restoreSnapBtn.clicked.connect(self.onRestoreSnapBtnClicked)
        snapLayout.addWidget(self.takeSnapBtn)

        snapLayout.addWidget(self.snapCenterBtn)
        snapLayout.addWidget(self.restoreSnapBtn)
        #self.snapMenuBtn.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        #self.snapMenuBtn.customContextMenuRequested.connect(self.snapMenuBtnContextMenu)
        self.layout.addLayout(snapLayout)


        indentLayout = QtGui.QHBoxLayout()
        self.indentBtn = QtGui.QPushButton()
        self.indentBtn.setIcon(QIconFromXPMString(indent_icon))
        self.indentBtn.setToolTip("Increase indentation of selection")
        self.indentBtn.clicked.connect(self.onIndentBtnClicked)
        indentLayout.addWidget(self.indentBtn)
        self.indentBackBtn = QtGui.QPushButton()
        self.indentBackBtn.setIcon(QIconFromXPMString(unindent_icon))
        self.indentBackBtn.setToolTip("Decrease indentation of selection")
        self.indentBackBtn.clicked.connect(self.onIndentBackBtnClicked)
        indentLayout.addWidget(self.indentBackBtn)
        self.layout.addLayout(indentLayout)

        consoleLayout = QtGui.QHBoxLayout()
        consoleLayout.addWidget(QtGui.QLabel("To console:"))
        self.consoleEdit = QtGui.QLineEdit()
        self.consoleEdit.returnPressed.connect(self.onConsoleEditReturnPressed)
        self.consoleEdit.setToolTip("Access QPlainTextEdit of current editor directly.\n\
Enter command here and press return\n\
Variable 'editor' will remain afterwards for direct access from the console.\n\
Type 'help(editor)' in the console for help.\n\
")
        self.consoleEdit.setText("editor.selectAll()")
        self.consoleSendBtn = QtGui.QPushButton("Send")
        self.consoleSendBtn.clicked.connect(self.onConsoleBtnClicked)
        consoleLayout.addWidget(self.consoleEdit)
        #consoleLayout.addWidget(self.consoleSendBtn)
        self.layout.addLayout(consoleLayout)
        self.updateSnapBtns()

    def getEditors(self):
        self.editors = [child for child in mw.findChildren(QtGui.QPlainTextEdit) if child.objectName() != "Python console"]
        self.parents = [ed.parent() for ed in self.editors]
        self.grandparents = [p.parent() for p in self.parents]
        self.titles = [g.windowTitle() for g in self.grandparents]

    def setCurrentEditor(self, name=""):
        if name:
            self.currentEditor = self.editorDict[name]
            if name in self.titles:
                self.editorList.setCurrentRow(self.titles.index(name))
        else:
            if self.editorList.currentItem():
                name = self.editorList.currentItem().text()
                self.currentEditor = self.editorDict[name]
        if shiboken and shiboken.isValid(self.currentEditor) and self.currentEditor and not self.currentEditor.hasFocus():
            self.currentEditor.setFocus()
        #self.print(f"Current editor: {name}, text = {self.currentEditor.toPlainText()}")

    def onEditorListCurrentItemChanged(self, current, previous):
        if self.blockSignals:
            return
        self.onRefreshBtnClicked(True)
        self.currentEditor.setFocus()
        if not self.currentEditor.hasFocus():
            self.toast(f"cannot set focus on {self.editorList.currentItem().text()}","warning")
        self.onFindEditTextChanged(None)
        self.updateUndoBtn()
        self.updateSnapBtns()
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        if name:
            if name in self.gotoLineDict:
                self.gotoLineEdit.setText(self.gotoLineDict[name])
            else:
                self.gotoLineEdit.setText("")

    def doCommand(self, cmd):
        FreeCADGui.doCommand(cmd)

    def setText(self, name, txt, reason):
        old_text = self.editorDict[name].toPlainText()
        old_cursor = self.editorDict[name].textCursor()
        self.editorDict[name].setPlainText(txt)
        self.setModified(name, old_text, reason, self.getTC(old_cursor))

    def getTC(self, text_cursor):
        return tuple([text_cursor.selectionStart(), text_cursor.selectionEnd()])

    def setTextCursor(self, name, tc):
        ed = self.editorDict[name]
        text_cursor = ed.textCursor()
        text_cursor.setPosition(tc[0])
        text_cursor.setPosition(tc[1], QtGui.QTextCursor.KeepAnchor)
        ed.setTextCursor(text_cursor)

    def getText(self, name):
        return self.editorDict[name].toPlainText()

    def filterBackSlashes(self, instring):
            txt = instring.replace('\\t',chr(9)).replace('\\n',chr(10)).replace('\\r',chr(13))
            txt = txt.replace('\\b',chr(8)).replace('\\f',chr(12)).replace('\'',chr(39))
            txt = txt.replace('\\',chr(92))
            return txt

    def replace(self, name, txt, newTxt):
        if not txt:
            self.toast("nothing to replace","error")
            return
        fullText = self.getText(name)
        if self.matchCaseCheckBox.checkState():
            txt = self.filterBackSlashes(txt)
            newText = fullText.replace(txt, newTxt)
            count = fullText.count(txt)
        else:
            fulltextlower = fullText.lower()
            txtlower = self.filterBackSlashes(txt.lower())
            indices = []#(from,to) tuples
            idx = 0
            while idx != -1:
                idx = fulltextlower.find(txtlower,idx)
                if idx==-1:
                    break
                indices.append(tuple([idx,idx+len(txtlower)]))
                idx += len(txtlower)
            chunks = []
            last = -1
            for i in reversed(indices):
                chunks.insert(0, fullText[i[1]:last])
                chunks.insert(0, newTxt)
                last = i[0]
            chunks.insert(0, fullText[:last])
            newText = "".join(chunks)
            count = len(indices)
        self.toast(f"{count} instances of {txt} replaced in {name}","message")
        if not count == 0:
            self.setText(name, newText, f"replace {txt}")


    def onMatchWholeCheckBoxStateChanged(self, arg1):
        self.replaceAllBtn.setEnabled(not self.matchWholeCheckBox.checkState())

    def find(self, name, txt, backward = False):
        self.setCurrentEditor()
        if not self.currentEditor:
            self.toast("No editor selected")
            return
        if not txt:
            self.toast("Nothing to find.")
            return
        str1 = "'"
        findFlagsList = []

        if self.matchCaseCheckBox.checkState():
            findFlagsList.append("QtGui.QTextDocument.FindFlag.FindCaseSensitively")
        if self.matchWholeCheckBox.checkState():
            findFlagsList.append("QtGui.QTextDocument.FindFlag.FindWholeWords")
        if backward:
            findFlagsList.append("QtGui.QTextDocument.FindFlag.FindBackward")
        if findFlagsList:
            str1 = "', "
            findFlags = "|".join(findFlagsList)
        else:
            findFlags = ""
        newtxt = txt.replace('"', '\\"').replace("'","\\'")
        #self.currentEditor.find(txt, flags)
        #self.toast(f"self.currentEditor.find({txt},{flags})", "message",10000)

        cmd = """
from PySide import QtGui
__editors__ = [child for child in FreeCADGui.getMainWindow().findChildren(QtGui.QPlainTextEdit)]
__parents__ = [ed.parent() for ed in __editors__]
__grandparents__ = [p.parent().windowTitle() for p in __parents__]
__editor__ = __editors__[__grandparents__.index('""" + name + """')]
__editor__.find('""" + newtxt + str1 + findFlags + """)
del(__editors__, __parents__, __grandparents__, __editor__)

"""

        self.doCommand(cmd)

    def onMsgBtnClicked(self, arg1):
        self.toast(self.lastToast,"information")

    def onConsoleEditReturnPressed(self):
        self.onConsoleBtnClicked(True)

    def toast(self,msg,msgType='error',length=5000):
        self.timers.append(msg)
        self.msgBtn.setText(msg)
        if msgType == 'error':
            self.msgBtn.setStyleSheet("color: red")
            self.msgBtn.setIcon(QIconFromStandard("SP_MessageBoxCritical"))
        elif msgType == 'message':
            self.msgBtn.setStyleSheet("color:black")
        elif msgType == 'warning':
            self.msgBtn.setStyleSheet("color:yellow;background-color:navy;font-weight:bold")
            self.msgBtn.setIcon(QIconFromStandard("SP_MessageBoxWarning"))
        elif msgType == 'information':
            self.msgBtn.setStyleSheet("color:blue")
            self.msgBtn.setIcon(QIconFromStandard("SP_FileDialogInfoView"))
        QtCore.QTimer().singleShot(length,self.clearToast)

    def clearToast(self):
        #in case there are new messages we don't want to delete them yet, let their timers do it later
        if len(self.timers) == 1:
            self.lastToast = self.msgBtn.text()
            self.msgBtn.setText("")
            self.msgBtn.setStyleSheet("color:black")
            self.msgBtn.setIcon(QIconFromStandard("SP_FileDialogInfoView"))
            self.timers.pop()
        elif len(self.timers) > 1:
            self.timers.pop()

    def onConsoleBtnClicked(self, arg1):
        consoleCmd = self.consoleEdit.text()
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        if not name:
            self.toast("No editor selected")
            return
        old_text = self.editorDict[name].toPlainText()
        old_cursor = self.editorDict[name].textCursor()
        cmd = """
from PySide import QtGui
__editors__ = [child for child in FreeCADGui.getMainWindow().findChildren(QtGui.QPlainTextEdit)]
__parents__ = [ed.parent() for ed in __editors__]
__grandparents__ = [p.parent().windowTitle() for p in __parents__]
editor = __editors__[__grandparents__.index('""" + name + """')]
"""+ consoleCmd + """
del(__editors__, __parents__, __grandparents__)
"""
        self.doCommand(cmd)
        self.setModified(name, old_text, "Console command", self.getTC(old_cursor))
        self.toast("editor now available as variable in python console","message")

    def onFindEditReturnPressed(self):
        self.onFindBtnClicked(True)

    def onFindEditTextChanged(self, arg1):
        matchCase = self.matchCaseCheckBox.checkState()
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "error")
            return
        plainText = self.currentEditor.toPlainText()
        txt = self.filterBackSlashes(self.findEdit.text())
        if not matchCase:
            plainText = plainText.lower()
            txt = txt.lower()
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        count = plainText.count(txt)
        if name and txt:
            self.toast(f"{txt} count in {name}: {count}","message")

    def onFindBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid","error")
            return
        self.currentEditor.setFocus()
        name = self.editorList.currentItem().text()
        txt = self.findEdit.text()
        matchCase = self.matchCaseCheckBox.checkState()
        self.find(name, txt)

    def updateSnapBtns(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text() if self.editorList.count() else None
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.restoreSnapBtn.setEnabled(False)
            self.restoreSnapBtn.setText("Restore")
            self.popSnapBtn.setEnabled(False)
        else:
            self.restoreSnapBtn.setEnabled(True)
            self.restoreSnapBtn.setText(f"Restore {snaps[0]['reason']}")
            self.popSnapBtn.setEnabled(True)

    def onTakeSnapBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        self.updateSnapBtns()
        curName = self.editorList.currentItem().text() if self.editorList.count() else ""
        if not curName:
            self.toast("No current editor","error")
            return
        curText = self.currentEditor.toPlainText()
        curCursor = self.currentEditor.textCursor()
        tc = self.getTC(curCursor)
        count = 1
        for snap in self.snaps:
            if snap["name"] == curName:
                count += 1
        thisSnap = {"name":curName, "old_text":curText, "reason":f"Snap #{count}", "tc":tc}
        self.snaps.append(thisSnap)
        self.toast(f"{thisSnap['reason']} taken of {curName}","message")
        if len(self.snaps) > UNDO_QUEUE_MAX_SIZE:
            self.snaps.pop(0)
            self.toast("Snaps count exceeds {UNDO_QUEUE_MAX_SIZE}, popping oldest snap","warning")
        self.updateSnapBtns()

    def popSnap(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No snaps to pop for this editor","error")
            self.updateSnapBtns()
            return
        else:
            self.snaps.remove(snaps[0])
            self.updateSnapBtns()

    def popAllSnaps(self):
        self.onRefreshBtnClicked(True)
        self.snaps = []
        self.updateSnapBtns()

    def onRestoreSnapBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No snaps to restore for this editor","error")
            self.updateSnapBtns()
            return
        else:
            old_text = self.currentEditor.toPlainText()
            old_cursor = self.currentEditor.textCursor()
            self.currentEditor.setPlainText(snaps[0]["old_text"])
            #self.currentEditor.setTextCursor(snaps[0]['tc'])
            self.setTextCursor(self.editorList.currentItem().text(), snaps[0]['tc'])
            self.snaps.remove(snaps[0])
            self.updateSnapBtns()
            self.toast(f"Restored {snaps[0]['reason']} to {snaps[0]['name']}","message")
            self.setModified(curName, old_text, f"Restore {snaps[0]['reason']}", self.getTC(old_cursor))

    def onSnapMenuBtnClicked(self, arg1):
        qp = QtCore.QPoint()
        self.snapMenuBtnContextMenu(qp)

    def snapMenuBtnContextMenu(self, point):
        snapContextMenu = QtGui.QMenu(mw)
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text() if self.editorList.count() else ""
        if not curName:
            self.toast("No current editor","error")
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]

        restoreToClipboardAction = QtGui.QAction("Restore to clipboard", mw)
        restoreToClipboardAction.triggered.connect(self.doRestoreToClipboard)
        restoreToClipboardAction.setEnabled(len(snaps) > 0)
        snapContextMenu.addAction(restoreToClipboardAction)

        restoreToTextDocumentAction = QtGui.QAction("Restore to new Text document", mw)
        restoreToTextDocumentAction.triggered.connect(self.doRestoreToTextDocument)
        restoreToTextDocumentAction.setEnabled(len(snaps) > 0)
        snapContextMenu.addAction(restoreToTextDocumentAction)

        saveSnapshotAsAction = QtGui.QAction("Save snapshot as...", mw)
        saveSnapshotAsAction.triggered.connect(self.doSaveSnapshotAs)
        saveSnapshotAsAction.setEnabled(len(snaps) > 0)
        snapContextMenu.addAction(saveSnapshotAsAction)

        snapContextMenu.addSeparator()

        popAction = QtGui.QAction("Pop latest snap", mw)
        popAction.setToolTip("Disards most recent snap for the current editor")
        popAction.triggered.connect(self.popSnap)
        popAction.setEnabled(len(snaps) > 0)
        snapContextMenu.addAction(popAction)

        popAllAction = QtGui.QAction("Pop all snaps", mw)
        popAllAction.setToolTip("Disards all snaps for all editors")
        popAllAction.triggered.connect(self.popAllSnaps)
        popAllAction.setEnabled(len(snaps) > 0)
        snapContextMenu.addAction(popAllAction)


        snapContextMenu.exec_(self.snapMenuBtn.mapToGlobal(point))
        #snapContextMenu.exec_(self.takeSnapBtn.mapToGlobal(point))

    def doSaveSnapshotAs(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No saved snapshot to save as","error")
            self.updateSnapBtns()
            return
        else:
            fname = QtGui.QFileDialog.getSaveFileName(FreeCADGui.getMainWindow(),"Save snapshot to text file",filter='*.*')[0]
            if not fname:
                return
            with open(fname,"w") as outfile:
                outfile.write(snaps[0]['old_text'])
            self.toast(f"Snapshot: {snaps[0]['reason']} saved to {fname}","message")

    def doRestoreToClipboard(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No saved snapshot to send to clipboard","error")
            self.updateSnapBtns()
            return
        else:
            clipboard = QtGui.QClipboard()
            clipboard.setText(snaps[0]["old_text"])
            self.toast(f"Snapshot: {snaps[0]['reason']} sent to clipboard","message")

    def doRestoreToTextDocument(self):
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text()
        snaps = [snap for snap in reversed(self.snaps) if snap["name"] == curName]
        if not snaps:
            self.toast("No saved snapshot to restore to text document","error")
            self.updateSnapBtns()
            return
        else:
            doc = FreeCAD.ActiveDocument if FreeCAD.ActiveDocument else FreeCAD.newDocument()
            textDoc = doc.addObject("App::TextDocument","Text document")
            textDoc.Text = snaps[0]['old_text']
            self.toast(f"Snapshot: {snaps[0]['reason']} sent to {textDoc.Name}","message")
            textDoc.ViewObject.doubleClicked()
            doc.recompute()

    def onUndoBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        self.updateUndoBtn()
        curName = self.editorList.currentItem().text()
        curCursor = self.editorDict[curName].textCursor()
        for queue in reversed(self.undoQueue):
            if curName == queue["name"]:
                redo = {"name":curName, "reason":queue["reason"], "old_text":self.currentEditor.toPlainText(), "tc":self.getTC(curCursor)}
                self.currentEditor.setPlainText(queue["old_text"])
                self.setTextCursor(curName, queue['tc'])
                self.redoQueue.append(redo)
                self.undoQueue.pop()
                self.updateUndoBtn()
                break

    def onUndoClearBtnClicked(self, arg1):
        count = len(self.undoQueue) + len(self.redoQueue)
        self.undoQueue = []
        self.redoQueue = []
        self.updateUndoBtn()
        self.toast(f"Undo/redo queues purged ({count} items)","message")

    def onRedoBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        self.updateUndoBtn()
        curName = self.editorList.currentItem().text()
        for queue in reversed(self.redoQueue):
            if curName == queue["name"]:
                undo = {"name":curName, "reason":queue["reason"], "old_text":self.currentEditor.toPlainText(), "tc":self.getTC(self.currentEditor.textCursor())}
                self.currentEditor.setPlainText(queue["old_text"])
                #self.currentEditor.setTextCursor(queue['tc'])
                self.setTextCursor(curName, queue['tc'])
                self.undoQueue.append(undo)
                self.redoQueue.pop()
                self.updateUndoBtn()
                break

    def updateUndoBtn(self):
        self.undoBtn.setText("")
        if not self.editorList.currentItem():
            return
        curName = self.editorList.currentItem().text()

        self.undoBtn.setEnabled(False)
        for queue in reversed(self.undoQueue):
            if curName == queue["name"]:
                self.undoBtn.setText(f"Undo {queue['reason']}")
                self.undoBtn.setEnabled(True)
                break
        self.redoBtn.setText("")
        self.redoBtn.setEnabled(False)
        for queue in reversed(self.redoQueue):
            if curName == queue["name"]:
                self.redoBtn.setText(f"Redo {queue['reason']}")
                self.redoBtn.setEnabled(True)
                break
        self.undoClearBtn.setEnabled(len(self.undoQueue)+len(self.redoQueue))

    def onFindBackBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid","error")
            return
        self.currentEditor.setFocus()
        name = self.editorList.currentItem().text()
        txt = self.findEdit.text()
        self.find(name, txt, True)

    def setModified(self, name, old_text, reason, tc):
        self.undoQueue.append({"name":name, "old_text": old_text, "reason":reason, "tc":tc})
        if len(self.undoQueue) > UNDO_QUEUE_MAX_SIZE:
            self.toast(f"undo queue reached max size {UNDO_QUEUE_MAX_SIZE}\npopping {self.undoQueue[0]['reason']}","warning")
            self.undoQueue.pop(0)
        self.updateUndoBtn()
        self.currentEditor.document().setModified(True)

    def onIndentBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "error")
            return
        self.currentEditor.setFocus()
        old_text = self.currentEditor.toPlainText()
        tc = self.currentEditor.textCursor()
        txt = tc.selectedText()
        if not txt:
            self.toast("nothing selected to indent")
            return
        lines = txt.splitlines()
        lines2 = ['    '+line for line in lines]
        joined = '\u2029'.join(lines2)
        tc.insertText(joined)
        self.setModified(self.editorList.currentItem().text(), old_text, "Indent >>", self.getTC(tc))
        tc.movePosition(QtGui.QTextCursor.Up, QtGui.QTextCursor.KeepAnchor, len(lines2)-1)
        tc.movePosition(QtGui.QTextCursor.StartOfLine, QtGui.QTextCursor.KeepAnchor)
        self.currentEditor.setTextCursor(tc)

    def onIndentBackBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "error")
            return
        self.currentEditor.setFocus()
        old_text = self.currentEditor.toPlainText()
        old_cursor = self.currentEditor.textCursor()
        name = self.editorList.currentItem().text()
        tc = self.currentEditor.textCursor()
        txt = tc.selectedText()
        if not txt:
            self.toast("nothing selected to unindent")
            return
        lines = txt.splitlines()
        hasLeading = True
        for line in lines:
            if not line[:4] == '    ':
                hasLeading = False
        if not hasLeading:
            self.toast("Editor assistant: Cannot unindent selected block","error")
            return
        lines2 = [line[4:] for line in lines]
        joined = '\u2029'.join(lines2)
        tc.insertText(joined)
        self.setModified(self.editorList.currentItem().text(), old_text, "<< Unindent", self.getTC(old_cursor))
        tc.movePosition(QtGui.QTextCursor.Up, QtGui.QTextCursor.KeepAnchor, len(lines2)-1)
        tc.movePosition(QtGui.QTextCursor.StartOfLine, QtGui.QTextCursor.KeepAnchor)
        self.currentEditor.setTextCursor(tc)

    def onReplaceAllBtnClicked(self, arg1):
        if self.matchWholeCheckBox.checkState():
            self.toast("Replace all does not work with Match word = checked","error",10000)
            return
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "error")
            return
        self.currentEditor.setFocus()
        name = self.editorList.currentItem().text()
        txt = self.findEdit.text()
        newTxt = self.replaceEdit.text()
        self.replace(name, txt, newTxt)

    def onReplaceBtnClicked(self, arg1):
        self.onRefreshBtnClicked(True)
        if not shiboken.isValid(self.currentEditor) or not self.currentEditor:
            self.toast("current editor is invalid", "error")
            return
        self.currentEditor.setFocus()
        document = self.currentEditor.document()
        name = self.editorList.currentItem().text()
        text_cursor = self.currentEditor.textCursor()
        txt = self.currentEditor.toPlainText()
        start = text_cursor.selectionStart()
        end = text_cursor.selectionEnd()
        if start == end:
            self.toast("Nothing selected, press Find and try again")
            return
        txt1 = txt[:start]
        txt2 = txt[end:]
        newtxt = self.replaceEdit.text()
        newText = txt1 + newtxt + txt2
        self.setText(name,newText,f"replace {txt[start:end]}")
        text_cursor.setPosition(end)
        self.currentEditor.setTextCursor(text_cursor)
        self.onFindBtnClicked(True)

    def onRefreshBtnClicked(self, arg1):
        self.getEditors()
        #self.print(f"(btnRefresh): self.editors: {self.editors}")
        self.editorDict = {}
        for zz in zip(self.editors, self.parents, self.grandparents):
            self.editorDict [zz[2].windowTitle()] = zz[0]
            #self.print(f"ed = {ed}")
        self.populateList()
        self.setCurrentEditor()

    def gotoLineActionTriggered(self):
        line = self.getFirstLine()
        self.gotoLine(line)

    def parseLine(self, line_as_string):
        try:
            parsed = int(line_as_string)
            return parsed
        except ValueError as ve:
            self.print(f"{ve}","Error")
            return 0

    def getFirstLine(self):
        """gets first line in the Goto line edit"""
        if not self.gotoLineEdit.text():
            return 0
        else:
            lines = self.gotoLineEdit.text().split(',')
            if lines:
                return self.parseLine(lines[0])
            else:
                self.toast("Unable to parse lines","error")
                return 0

    def getGotoLines(self):
        if not self.gotoLineEdit.text():
            return []
        lines = self.gotoLineEdit.text().split(',')
        parsed = [self.parseLine(line) for line in lines if self.parseLine(line)]
        return parsed

    def onGotoLineEditTextChanged(self, arg1):
        """save the goto line edit text for each editor"""
        name = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        if not name:
            return
        self.gotoLineDict[name] = arg1

    def onGotoMenuBtnClicked(self, arg1):

        gotoMenu = QtGui.QMenu(mw)
        self.onRefreshBtnClicked(True)
        curName = self.editorList.currentItem().text() if self.editorList.count() else ""
        if not curName:
            self.toast("No current editor","error")

        lineNumsMenu = QtGui.QMenu("Line numbers")
        lineNums = self.getGotoLines()
        def makeLambda(x): return lambda: self.gotoLine(x)
        gotoLineLambdas = [makeLambda(lineNum) for lineNum in lineNums]
        gotoLineActions = []
        for ii,lineNum in enumerate(lineNums):
            gotoLineActions.append(QtGui.QAction(f"Go to line {lineNum}", mw))
            gotoLineActions[-1].triggered.connect(gotoLineLambdas[ii])
            gotoLineActions[-1].setEnabled(len(self.gotoLineEdit.text()) > 0)
            #gotoMenu.addAction(gotoLineActions[-1])
            lineNumsMenu.addAction(gotoLineActions[-1])
        gotoMenu.addMenu(lineNumsMenu)
        if not gotoLineLambdas:
            lineNumsMenu.setEnabled(False)

        #classDefLines = (class name, def/class text, line number)
        classDefLinesMenu = QtGui.QMenu("Class/Def lines")
        classDefLines = sorted(self.getClassDefLines())
        classDefLineActions = []
        classDefLineLambdas = [makeLambda(cl[2]) for cl in classDefLines]
        for ii,classDefLine in enumerate(classDefLines):
            if "class" in classDefLine[1]:
                classDefLineActions.append(QtGui.QAction(f"{classDefLine[1]} ({classDefLine[2]})", mw))
            else: #def line
                classDefLineActions.append(QtGui.QAction(f"({classDefLine[0]}) {classDefLine[1]} ({classDefLine[2]})", mw))
            classDefLineActions[-1].triggered.connect(classDefLineLambdas[ii])
            classDefLinesMenu.addAction(classDefLineActions[-1])
        gotoMenu.addMenu(classDefLinesMenu)
        if not classDefLineLambdas:
            classDefLinesMenu.setEnabled(False)

        bookmarks = sorted(self.getBookmarks())
        bookmarksMenu = QtGui.QMenu("Bookmarks")
        bookmarksMenu.setToolTipsVisible(True)
        bookmarkActions = []
        bookmarkLambdas = [makeLambda(bm[1]) for bm in bookmarks]
        for ii,bm in enumerate(bookmarks):
            bookmarkActions.append(QtGui.QAction(f"{bm[0]} ({bm[1]})", mw))
            bookmarkActions[-1].triggered.connect(bookmarkLambdas[ii])
            bookmarksMenu.addAction(bookmarkActions[-1])

        gotoMenu.addMenu(bookmarksMenu)
        if not bookmarks:
            bookmarksMenu.setEnabled(False)

        gotoMenu.exec_(self.gotoMenuBtn.mapToGlobal(QtCore.QPoint()))


    def onGotoLineEditReturnPressed(self):
        lines = self.getGotoLines()
        if len(lines) == 1:
            self.gotoLine(lines[0])
        else:
            self.onGotoMenuBtnClicked(True)

    def gotoLine(self,line):
        self.onRefreshBtnClicked(True)
        document = self.currentEditor.document()
        if line < 0:
            txt = self.currentEditor.toPlainText()
            txt_lines = txt.splitlines()
            txt_len = len(txt_lines)
            line = txt_len + line
            pass
        text_block = document.findBlockByLineNumber(line-1)
        if not text_block.isValid():
            self.toast(f"Cannot goto Line# {line} of {self.editorList.currentItem().text()}")
            return
        text_cursor = self.currentEditor.textCursor()
        text_cursor.setPosition(text_block.position())
        self.currentEditor.setTextCursor(text_cursor)
        self.toast(f"Goto Line #{line} of {self.editorList.currentItem().text()}","message")

    def getLines(self,name=None):
        """get plain text as string list"""
        if name:
            ed = self.editorDict[name]
            txt = ed.getPlainText()
        else:
            txt = self.currentEditor.toPlainText()
        return txt.splitlines()

    def getTrimmedLines(self, name=None):
        """remove all leading whitespace"""
        lines = self.getLines(name)
        lines2 = []
        for line in lines:
            lines2.append(line.strip())
        return lines2

    def getBookmarks(self):
        lines = self.getTrimmedLines()
        bookmarks = []
        for ii,line in enumerate(lines):
            if BOOKMARK_MARKER in line:
                descIdx = line.find(BOOKMARK_MARKER) + len(BOOKMARK_MARKER)
                desc = line[descIdx:].strip()
                if desc:
                    bookmarks.append(tuple([desc, ii+1]))
        return bookmarks

    def getClassDefLines(self):
        """tuple(class name, class/def line, line number)"""
        lines = self.getTrimmedLines()
        classDefLines = []
        curClass = ""
        for ii,line in enumerate(lines):
            if "class " in line and ":" in line:
                idx = line.find("class ")
                idx2 = line.find(":", idx)
                curClass = line[idx + len("class "):idx2]
                if "(" in curClass and ")" in curClass:
                    idx3 = curClass.find("(")
                    idx4 = curClass.find(")",idx3)
                    if idx4 > idx3:
                        curClass = curClass[:idx3]
                    else:
                        curClass = ""
                classDefLines.append(tuple([curClass, line[idx:idx2], ii+1]))
            elif "def " in line and ":" in line:
                idx = line.find("def ")
                idx2 = line.find(":", idx)
                classDefLines.append(tuple([curClass, line[idx:idx2], ii+1]))
        return classDefLines

    def populateList(self):
        self.blockSignals = True
        current = None
        if self.editorList.count() != 0:
            current = self.editorList.currentItem().text() if self.editorList.currentItem() else ""
        self.editorList.clear()
        for k in sorted(self.editorDict.keys()):
            self.editorList.addItem(k)

        if current and current in self.editorDict:
            items = self.editorList.findItems(current, QtCore.Qt.MatchExactly)
            self.editorList.setCurrentItem(items[0] if items else self.editorList.item(0))
            pass
        else:
            self.editorList.setCurrentRow(0)

        self.setCurrentEditor()
        self.blockSignals = False

    def print(self,message,type="Message"):
        if type == "Message":
            FreeCAD.Console.PrintMessage(message+"\n")
        elif type == "Error":
            FreeCAD.Console.PrintError(message+"\n")
        elif type == "Warning":
            FreeCAD.Console.PrintWarning(message+"\n")

    def getStandardButtons(self):
        return int(QtGui.QDialogButtonBox.Close)

    def reject(self):
        FreeCADGui.Control.closeDialog()
        if FreeCADGui.activeDocument():
            FreeCADGui.activeDocument().resetEdit()

class Dockable (QtGui.QDockWidget):
    def __init__(self, parent=mw):
        super(Dockable,self).__init__(parent, QtCore.Qt.Tool)
        dlg = TaskEditorAssistant()
        QtGui.QDockWidget.setWindowIcon(self, QIconFromXPMString(__icon__))
        self.setWidget(dlg.form)
        self.setWindowTitle(f"Editor assistant v{__version__}")
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)

def QIconFromXPMString(xpm_string):
    xpm = xpm_string.replace("\"","").replace(',','').splitlines()[4:-1]
    pixmap = QtGui.QPixmap(xpm)
    icon = QtGui.QIcon(pixmap)
    return icon

def QIconFromStandard(name):
    pixmap = getattr(QtGui.QStyle,name)
    icon = QtGui.QPushButton().style().standardIcon(pixmap)
    return icon

def showEditorAssistantAsDockWidget():
    dockWidget = Dockable(mw)
    dockWidget.show()



def showEditorAssistantDialog():
    '''show the editor assistant dialog'''
    if not FreeCADGui.Control.activeDialog():
        dlg = TaskEditorAssistant()
        FreeCADGui.Control.showDialog(dlg)
    else:
        FreeCAD.Console.PrintError("Another task dialog is active.  Showing as dockable widget instead.\n")
        showEditorAssistantAsDockWidget()

__icon__="""
/* XPM */
static char *_647719150564[] = {
/* columns rows colors chars-per-pixel */
"64 64 7 1 ",
"  c black",
". c #EDED1C1C2424",
"X c #2222B1B14C4C",
"o c #FFFFC9C90E0E",
"O c #3F3F4848CCCC",
"+ c #DFDFDFDFDFDF",
"@ c None",
/* pixels */
"                                                   @@@@@@@@@@@@@",
"                                                   @@@@@@@@@@@@@",
"                                                    @@@@@@@@@@@@",
"                                                     @@@@@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++      @@@@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++       @@@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++        @@@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +     @@@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++     @@@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +++     @@@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++++     @@@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +++++     @@@",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++++++     @@",
"    ++++++++++++++++++++++++++++++++++++++++++++   +++++++     @",
"    ++++++++++++++++++++++++++++++++++++++++++++   ++++++++    @",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++                ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++                ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++                ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++++++++++++++    ",
"    +++++++OOOOOOOOOOOXXXXXXXXXX          ++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    +++++++ooooo        ............         XXXXX++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    +++++++     XXXXXXXXXXXXXXOOOOOXXXXXXXXX      ++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    +++++++.......             ooooooOOOOOOOOOOOOO++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++    ",
"                                                                ",
"                                                                ",
"                                                                ",
"                                                                "
};

"""

undo_icon = """
/* XPM */
static char *edit_undo_XPM[] = {
/* columns rows colors chars-per-pixel */
"64 64 7 1",
"   c None",
".  c #FF8000",
"+  c #FFFF80",
"@  c #666666",
"#  c #FFFF00",
"$  c #FF8080",
"%  c None",
/* pixels */
"                                                                ",
"                                                                ",
"                            ..                                  ",
"                            ...                                 ",
"                          .....                                 ",
"                         ......                                 ",
"                        ...+...                                 ",
"                        ..++...                                 ",
"                      ...+++...                                 ",
"                     ...++++...                                 ",
"                    ...+++++...                                 ",
"                    ..++++++...                                 ",
"                  ...+++++++...                                 ",
"                ....++++++++...                                 ",
"               ...++++++++++...                                 ",
"              ...+++++++++++.@.                                 ",
"             ...++++++++++++...........                         ",
"            ...+++++++++++++.+++++++.....                       ",
"           ...++++++++++++++++++++++++++....                    ",
"          ...+++++++++++++++++++#+++++++....                    ",
"         ...++++++++++++++++++########+++++...                  ",
"        ...++++++++++++++++++##########+++++...                 ",
"       ...+++++++++++++++++##############++++...                ",
"      ....++++++++++++++++################++++..                ",
"      ...+++++++++++++++####################+++...              ",
"      ....++++++++++++++####################++++...             ",
"       ....++++++++++++######################+++#...            ",
"         ...+++++++++++#######################++##..            ",
"          ...+++++++++##########################++..            ",
"           ...+++++++#######++++++++############++..            ",
"            ...++++#########++++++++++++########++..            ",
"             ....+++########++....++++++########+++.            ",
"                ..++++######++.. .....++++#######++...          ",
"                ...++++#####++..  .....++++######++...          ",
"                 ...++++####++..     ...++++#####++...          ",
"                  ...+++####++..      ...+++#####++...          ",
"                   ...++++##++..        ..$+++###++...          ",
"                    ...++++#++..        ...+++###++...          ",
"                     ...++++++..         ..#++###++...          ",
"                      ...+++++..         ...++###++...          ",
"                        ..++++..          ..++###++...          ",
"                        %$.++#.$%   %  %  ..+++##++..           ",
"               %    %%  %%$.##.$%%%%%%%%  +.+++#+++.            ",
"              %%    %%% %%%....$%%%%%%%% %%.+++#+++.            ",
"            %%  %%%%%%%%%%%%....%%%%%%%%%%%.++##++..            ",
"           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.++#++#.. %%         ",
"        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.++++++...%%%        ",
"        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++...%%%%%        ",
"    %%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..+++++..%%%%%         ",
"    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++++.%%%%%%%%%% %%  ",
"   %%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++++..%%%%%%%%%%%%%  ",
"  %%%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%...++++++..%%%%%%% %%%%    ",
"     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..+++++++..%%%%%%%%% %%     ",
"     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..++++++...%%%%%%%%%  %%     ",
"    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%..+++++...%%%%%%%%%%%%%%%     ",
"    %%%% %%%%%%%%%%%%%%%%%%%%%%%%..++++...%%%%%%%%% %%%%%%      ",
"         %%%%%%%%%%%%%%%%%%%%%%%%.......%%%%%%%%%%%%%%% %%      ",
"         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %       ",
"         %%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %           ",
"              %%  %%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%              ",
"                 %%   %%%%  %%%%%%%% %%%                        ",
"                 %%    %%%% %%%%%%%%  %%                        ",
"                         %%     %                               ",
"                                                                "
};
"""
redo_icon = """
/* XPM */
static char *edit_redo_XPM[] = {
/* format */
"64 64 7 1",
"   c None",
".  c #FF8000",
"+  c #FFFF80",
"@  c #666666",
"#  c #FFFF00",
"$  c #FF8080",
"%  c None",
/* pixels */
"                                                                ",
"                                                                ",
"                                  ..                            ",
"                                 ...                            ",
"                                 .....                          ",
"                                 ......                         ",
"                                 ...+...                        ",
"                                 ...++..                        ",
"                                 ...+++...                      ",
"                                 ...++++...                     ",
"                                 ...+++++...                    ",
"                                 ...++++++..                    ",
"                                 ...+++++++...                  ",
"                                 ...++++++++....                ",
"                                 ...++++++++++...               ",
"                                 .@.+++++++++++...              ",
"                         ...........++++++++++++...             ",
"                       .....+++++++.+++++++++++++...            ",
"                    ....++++++++++++++++++++++++++...           ",
"                    ....+++++++#+++++++++++++++++++...          ",
"                  ...+++++########++++++++++++++++++...         ",
"                 ...+++++##########++++++++++++++++++...        ",
"                ...++++##############+++++++++++++++++...       ",
"                ..++++################++++++++++++++++....      ",
"              ...+++####################+++++++++++++++...      ",
"             ...++++####################++++++++++++++....      ",
"            ...#+++######################++++++++++++....       ",
"            ..##++#######################+++++++++++...         ",
"            ..++##########################+++++++++...          ",
"            ..++############++++++++#######+++++++...           ",
"            ..++########++++++++++++#########++++...            ",
"            .+++########++++++....++########+++....             ",
"          ...++#######++++..... ..++######++++..                ",
"          ...++######++++.....  ..++#####++++...                ",
"          ...++#####++++...     ..++####++++...                 ",
"          ...++#####+++...      ..++####+++...                  ",
"          ...++###+++$..        ..++##++++...                   ",
"          ...++###+++...        ..++#++++...                    ",
"          ...++###++#..         ..++++++...                     ",
"          ...++###++...         ..+++++...                      ",
"          ...++###++..          ..++++..                        ",
"           ..++##+++..  %  %   %$.#++.$%                        ",
"            .+++#+++.+  %%%%%%%%$.##.$%%  %%    %               ",
"            .+++#+++.%% %%%%%%%%$....%%% %%%    %%              ",
"            ..++##++.%%%%%%%%%%%....%%%%%%%%%%%%  %%            ",
"         %% ..#++#++.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%           ",
"        %%%...++++++.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        ",
"        %%%%%...++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        ",
"         %%%%%..+++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%    ",
"  %% %%%%%%%%%%.++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ",
"  %%%%%%%%%%%%%..++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%   ",
"    %%%% %%%%%%%..++++++...%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%%  ",
"     %% %%%%%%%%%..+++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     ",
"     %%  %%%%%%%%%...++++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     ",
"     %%%%%%%%%%%%%%%...+++++..%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ",
"      %%%%%% %%%%%%%%%...++++..%%%%%%%%%%%%%%%%%%%%%%%% %%%%    ",
"      %% %%%%%%%%%%%%%%%.......%%%%%%%%%%%%%%%%%%%%%%%%         ",
"       %  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         ",
"           % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%         ",
"              %%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%  %%              ",
"                        %%% %%%%%%%%  %%%%   %%                 ",
"                        %%  %%%%%%%% %%%%    %%                 ",
"                               %     %%                         ",
"                                                                "
};
"""
indent_icon = """
/* XPM */
static char *indent_xpm[] = {
/* format */
"64 64 9 1",
" 	c None",
".	c black",
"+	c #DFDFDF",
"@	c #3F48CC",
"#	c green",
"$	c #3F48CC",
"%	c black",
"&	c #ED1C24",
"*	c #E2D9D6",
/* pixels */
"...................................................             ",
"...................................................             ",
"....................................................            ",
".....................................................           ",
"....++++++++++++++++++++++++++++++++++++++++++++......          ",
"....++++++++++++++++++++++++++++++++++++++++++++.......         ",
"....++++++++++++++++++++++++++++++++++++++++++++........        ",
"....++++++++++++++++++++++++++++++++++++++++++++...+.....       ",
"....++++++++++++++++++++++++++++++++++++++++++++...++.....      ",
"....++++++++++++++++++++++++++++++++++++++++++++...+++.....     ",
"....++++++++++++++++++++++++++++++++++++++++++++...++++.....    ",
"....++++++++++++++++++++++++++++++++++++++++++++...+++++.....   ",
"....++++++++++++++++++++++++++++++++++++++++++++...++++++.....  ",
"....++++++++++++++++++++++++++++++++++++++++++++...+++++++..... ",
"....++++++++++++++++++++++++++++++++++++++++++++...++++++++.... ",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++................",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++................",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++................",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++....",
"....+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....+++....+++++++++++++++++++++++++++++++++++++++++++++++++....",
"....+++.....++++++++++++++++++++++++++++++++++++++++++++++++....",
"....+++..$$..++++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$...++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$$$...++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++..$$$$$$...++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++..$$$$$$$...++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++++..$$$$$$$...+++++++++++++++++++++++++++++++++++++....",
"....+++++++++..$$$$$$...++++++++++++++++++++++++++++++++++++....",
"....+++++++++++..$$$$$$..+++++++++++++++++++++++++++++++++++....",
"....+++++++++++++..$$$$$$..+++++++++++++++++++++++++++++++++....",
"....+++++++++++++++..$$$$$..++++++++++++++++++++++++++++++++....",
"....+++++++++++++++++..$$$$..+++++++++++++++++++++++++++++++....",
"....++++++++++++++++++..$$$$..+++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++++..$$$$..+++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++++..$$$$..+++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++..$$$$$..++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++++++++++++..$$$$$..+++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++++++++++++..$$$$$$..+++++++++++++++++++++++++++++++++....",
"....+++++++++++..$$$$$$$..++++++++++++++++++++++++++++++++++....",
"....+++++++++..$$$$$$$..++++++++++++++++++++++++++++++++++++....",
"....+++++++..$$$$$$$$..+++++++++++++++++++++++++++++++++++++....",
"....+++++..$$$$$$$$..+++++++++++++++++++++++++++++++++++++++....",
"....++++..$$$$$$$..+++++++++++++++++++++++++++++++++++++++++....",
"....+++..$$$$$$..++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$$..++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++..$$$..+++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....+++.....+++++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++...++++++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"....++++++++++++++++++++++++++++++++++++++++++++++++++++++++....",
"................................................................",
"................................................................",
"................................................................",
"................................................................"};

"""
replace_icon = """
/* XPM */
static char *_647894170722[] = {
/* columns rows colors chars-per-pixel */
"64 64 9 1 ",
"  c black",
". c #2B0000",
"X c #2B2B00",
"o c gray17",
"O c #552B2B",
"+ c #3F48CC",
"@ c #C3C3C3",
"# c #FFFFD4",
"$ c None",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@+++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@++++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@+++++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@@$$@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@@$$@@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@@+++++++++++++++++++++++++++@@$$@@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@++++++++++++++++++++++++++++@@$$@@               @@$$$",
"$$$$@@@@@+++++++++++@@@@@@@@@@@@@@@@@@@@$$@@               @@$$$",
"$$$$@@@@@++++++++++@@@@@@@@@@@@@@@@@@@@@$$@@               @@$$$",
"$$$$@@@@@+++++++++@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@#$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@#$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@#$$",
"$$$$@++++++++++++++++@@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@$$$$$$$$$$$$$$$$$$@@    @@@@@@@@   @@$$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@               @@$$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@               @@$$$",
"$$$$@@@++++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@               @@$$$",
"$$$$@@@@+++++++++++@@@@@$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@++++++++++@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@    XO@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@          .@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@             @@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@               @@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@     .@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@      @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     .@@@@@@@     @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@@     @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@      @@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@                @@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@              @@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@           @@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@o    .o@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
};

"""
find_previous_icon = """
/* XPM */
static char *_647896432515[] = {
/* columns rows colors chars-per-pixel */
"64 64 8 1 ",
"  c black",
". c #ED1C24",
"X c #22B14C",
"o c #FFC90E",
"O c #3F48CC",
"+ c #7A82DC",
"@ c #DFDFDF",
"# c None",
"################################################################",
"################################################################",
"#######                            #############################",
"######                               ###########################",
"#####   @@@@@@@@@@@@@@@@              ##########################",
"####  @ @@@@@@@@@@@@@@@                 ########################",
"###  @@ @@@@@@@@@@@@@@                   #######################",
"##  @@@ @@@@@@@@@@@@@@       +++++       #######################",
"#  @@@@ @@@@@@@@@@@@@       +++++++       ######################",
"        @@@     XXXXX     ++++++++++      ######################",
"        @@@     XXXX      +++++++++++      #####################",
"  @@@@@@@@@     XXXX     +++++++++++++     #####################",
"  @@@@@@@@@@@@@@@@@      +++++++++++++      ####################",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ####################",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ####################",
"  @@@@@XXX    ....     +++++++++++++++++     ###################",
"  @@@@@XXX    ....     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@     +++++++++++++++++     ###################",
"  @@@@@   XXXXXOOX     +++++++++++++++++     ###################",
"  @@@@@   XXXXXOOX     +++++++++++++++++     ###################",
"  @@@@@   XXXXXOOX     +++++++++++++++++     ###################",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ###############OOO##",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ##############OOOOO#",
"  @@@@@@@@@@@@@@@@@     +++++++++++++++     ##############OOOOO#",
"  @@@@@OOOOOOOooo        +++++++++++++      ############OOOOOOO#",
"  @@@@@OOOOOOOooo         +++++++++++      ############OOOOOOOO#",
"  @@@@@@@@@@@@@@@@@@      +++++++++++      ############OOOOOOO##",
"  @@@@@@@@@@@@@@@@@@@      +++++++++      #############OOOOOOO##",
"  @@@@@@@@@@@@@@@@@@@        +++++       ##############OOOOOOO##",
"  @@@@@@@@@@@@@@@@@@@@                   ##############OOOOOOO##",
"                                        ##############OOOOOOOO##",
"                                      ################OOOOOOOO##",
"##########################           #################OOOOOOO###",
"############################       ###################OOOOOOO###",
"#############################     ####################OOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ###################OOOOOOOO###",
"#############################     ##################OOOOOOOO####",
"#############################     #################OOOOOOOOO####",
"#############################     #################OOOOOOOOO####",
"#############################     ###############OOOOOOOOOOO####",
"#############################     #############OOOOOOOOOOOO#####",
"#####################OOO######################OOOOOOOOOOOOO#####",
"##################OOOOOOO####################OOOOOOOOOOOOO######",
"##############OOOOOOOOOOOO##################OOOOOOOOOOOOOO######",
"###########OOOOOOOOOOOOOOO##################OOOOOOOOOOOOO#######",
"########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO########",
"####OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO########",
"###OOOOOOOOOOOOOOO###OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#########",
"##OOOOOOOOOOOOO#######OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO##########",
"##OOOOOOOOOOOOO#######OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO############",
"###OOOOOOOOOOOOOOO###OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#############",
"####OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO##############",
"#######OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO################",
"###########OOOOOOOOOOOOOOOO#####################################",
"##############OOOOOOOOOOOO######################################",
"#################OOOOOOOO#######################################",
"#####################OOO########################################",
"################################################################",
"################################################################"
};
"""
find_next_icon = """
/* XPM */
static char *_647896407113[] = {
/* columns rows colors chars-per-pixel */
"64 64 8 1 ",
"  c black",
". c #ED1C24",
"X c #22B14C",
"o c #FFC90E",
"O c #3F48CC",
"+ c #7A82DC",
"@ c #DFDFDF",
"# c None",
"################################################################",
"################################################################",
"#############################           ########################",
"###########################                               ######",
"##########################              @@@@@@@@@@@@@@@@   #####",
"########################                 @@@@@@@@@@@@@@@ @  ####",
"#######################                   @@@@@@@@@@@@@@ @@  ###",
"#######################       +++++       @@@@@@@@@@@@@@ @@@  ##",
"######################       +++++++       @@@@@@@@@@@@@ @@@@  #",
"######################      ++++++++++     XXXXX     @@@        ",
"#####################      +++++++++++      XXXX     @@@        ",
"#####################     +++++++++++++     XXXX     @@@@@@@@@  ",
"####################      +++++++++++++      @@@@@@@@@@@@@@@@@  ",
"####################     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"####################     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     ....    XXX@@@@@  ",
"###################     +++++++++++++++++     ....    XXX@@@@@  ",
"###################     +++++++++++++++++     @@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     @@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     @@@@@@@@@@@@@@@@  ",
"###################     +++++++++++++++++     XOOXXXXX   @@@@@  ",
"###################     +++++++++++++++++     XOOXXXXX   @@@@@  ",
"###################     +++++++++++++++++     XOOXXXXX   @@@@@  ",
"##OOO###############     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"#OOOOO##############     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"#OOOOO##############     +++++++++++++++     @@@@@@@@@@@@@@@@@  ",
"#OOOOOOO############      +++++++++++++        oooOOOOOOO@@@@@  ",
"#OOOOOOOO############      +++++++++++         oooOOOOOOO@@@@@  ",
"##OOOOOOO############      +++++++++++      @@@@@@@@@@@@@@@@@@  ",
"##OOOOOOO#############      +++++++++      @@@@@@@@@@@@@@@@@@@  ",
"##OOOOOOO##############       +++++        @@@@@@@@@@@@@@@@@@@  ",
"##OOOOOOO##############                   @@@@@@@@@@@@@@@@@@@@  ",
"##OOOOOOOO##############                                        ",
"##OOOOOOOO################                                      ",
"###OOOOOOO#################           ##########################",
"###OOOOOOO###################       ############################",
"###OOOOOOO####################     #############################",
"###OOOOOOOO###################     #############################",
"###OOOOOOOO###################     #############################",
"###OOOOOOOO###################     #############################",
"###OOOOOOOO###################     #############################",
"####OOOOOOOO##################     #############################",
"####OOOOOOOOO#################     #############################",
"####OOOOOOOOO#################     #############################",
"####OOOOOOOOOOO###############     #############################",
"#####OOOOOOOOOOOO#############     #####OOOO####################",
"#####OOOOOOOOOOOOO######################OOOO####################",
"######OOOOOOOOOOOOO####################OOOOOOOO#################",
"######OOOOOOOOOOOOOO##################OOOOOOOOOOOOO#############",
"#######OOOOOOOOOOOOOOO##############OOOOOOOOOOOOOOOOOO##########",
"########OOOOOOOOOOOOOOO###########OOOOOOOOOOOOOOOOOOOOOOO#######",
"########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO####",
"#########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO###OOOOOOOOOOOOOOO###",
"##########OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#######OOOOOOOOOOOOO##",
"############OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#######OOOOOOOOOOOOO##",
"#############OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO###OOOOOOOOOOOOOOO###",
"##############OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO####",
"################OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO#######",
"##################OOOOO############OOOOOOOOOOOOOOOOOO###########",
"######################################OOOOOOOOOOOOO#############",
"#######################################OOOOOOOOO################",
"########################################OOOO####################",
"########################################OOOO####################",
"################################################################"
};

"""
replace_all_icon = """
/* XPM */
static char *_647894950477[] = {
/* columns rows colors chars-per-pixel */
"64 64 9 1 ",
"  c black",
". c #2B0000",
"X c #2B2B00",
"o c gray17",
"O c #552B2B",
"+ c #3F48CC",
"@ c #C3C3C3",
"# c #FFFFD4",
"$ c None",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@+++++++++++++++++++++++@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@++++++++++++++++++++++++@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@+++++++++++++++++++++++++@@@@@@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@   @@    @@$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++++++++++++++++++++++++++@   @@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@@++++++++++++@@@@@@@@@@@@@@@@   @@    @@@@@@@@@@@@@$$$",
"$$$$@@@@@@+++++++++++++@@@@@              @@               @@$$$",
"$$$$@@@@@+++++++++++@@@@@@@@              @@               @@$$$",
"$$$$@@@@@++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@@@+++++++++@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@@@@@++++++++@@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@#$$",
"$$$$@@@@++++++++++@@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@#$$",
"$$$$@@@++++++++++++@@@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@#$$",
"$$$$@++++++++++++++++@@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@+++++++++++++++++@@@@@@   @@@@@@@@   @@    @@@@@@@@   @@$$$",
"$$$$@@@++++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@++++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@++++++++++++@@@@@@@@@              @@               @@$$$",
"$$$$@@@@+++++++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$",
"$$$$@@@@++++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@++++++++++@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@++++++++@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@++++++@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@++++@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@++@@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@      @     @@@@@@@@@@    XO@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@               @@@@@@@          .@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@                @@@@@@             @@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@                 @@@@@               @@@$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@       @@@@      @@@@@     .@@$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@       @@@      @@@@@@      @@$$$$$$$$$$$$$$$$$$",
"$$@@     .@@@@@@@      @@@     .@@@@@@@     @@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@     @@@@@@@@@     @@@     @@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@      @@@@@@@      @@@      @@@@@@@     @@$$$$$$$$$$$$$$$$$$",
"$$@@@      @@@@@       @@@@      @@@@@      @@$$$$$$$$$$$$$$$$$$",
"$$@@@                  @@@@                @@@$$$$$$$$$$$$$$$$$$",
"$$@@@@                 @@@@@              @@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@               @@@@@@@           @@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@     . @     @@@@@@@@@o    .o@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",
"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
};
"""
unindent_icon = """
/* XPM */
static char * unindent_xpm[] = {
/* format */
"64 64 9 1",
"   c None",
"z  c #000000",
"+  c #DFDFDF",
"@  c #3F48CC",
"#  c #22B14C",
"x  c #3F48CC",
"%  c black",
"&  c #ED1C24",
"*  c #E2D9D6",
/* pixels */
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz              ",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz             ",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz            ",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz           ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzzzzz          ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzzzzzz         ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzzzzzzz        ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+zzzzz       ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++zzzzz      ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+++zzzzz     ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++++zzzzz    ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+++++zzzzz   ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++++++zzzzz  ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz+++++++zzzzz ",
"zzzz++++++++++++++++++++++++++++++++++++++++++++zzz++++++++zzzz ",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++zzzzzzzzzzzzzzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++zzzzzzzzzzzzzzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++zzzzzzzzzzzzzzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzzz",
"zzzz+++++++%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++++++++++++zz+++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++++zzzzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++zzxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++zzxxxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++zzxxxxxxxzz++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++zzxxxxxxxxzz+++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++zzxxxxxxxxzz++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++zzxxxxxxxxzz++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++zzxxxxxxxzz++++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++zzxxxxxxxzz++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++zzxxxxxxzz++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++zzxxxxxxzz+++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++zzxxxxzz+++++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++zzxxxxxzz++++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++zzxxxxxzzz++++++++++++++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++zzxxxxxxzz+++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++zzxxxxxxxzz+++++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++zzzxxxxxxzzz+++++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++zzzxxxxxxzz++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++zzzxxxxxxzz+++++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++zzzzxxxxxxzz+++++zzzz",
"zzzz+++++++++++++++++++++++++++++++++++++++++zzzzxxxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++zzzzxxxxzz+++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++zzxxxxzz++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++zzxxxzz++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++++zzxxzz++zzzz",
"zzzz++++%%%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++++zzzzz++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++zzz+++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzz++++++++++++++++++++++++++++++++++++++++++++++++++++++++zzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"};
"""
snapshot_icon = """
/* XPM */
static char *_647898900207[] = {
/* columns rows colors chars-per-pixel */
"64 64 3 1 ",
"  c gray4",
". c gray85",
"X c None",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX....................                 .....................XXXX",
"XX....................                 .....................XXXX",
"XX....................                 .....................XXXX",
"XX..................                     ...................XXXX",
"XX..................                     ...................XXXX",
"XX.........                                       ..........XXXX",
"XX.......                                            .......XXXX",
"XX.....                                               ......XXXX",
"XX....                                                 .....XXXX",
"XX....                                                  ....XXXX",
"XX...                                                   ....XXXX",
"XX...                                                    ...XXXX",
"XX...                       ......                       ...XXXX",
"XX...                     ..........                     ...XXXX",
"XX...                   ..............                   ...XXXX",
"XX...                  ................                  ...XXXX",
"XX...                 ..................                 ...XXXX",
"XX...                 ...................                ...XXXX",
"XX...                .........   ........                ...XXXX",
"XX...                .......       ......                ...XXXX",
"XX...               ........       .......               ...XXXX",
"XX...               .......         ......               ...XXXX",
"XX...               .......         ......               ...XXXX",
"XX...               .......         ......               ...XXXX",
"XX...               ........       .......               ...XXXX",
"XX...                .......       .......               ...XXXX",
"XX...                .........   ........                ...XXXX",
"XX...                 ...................                ...XXXX",
"XX...                 ..................                 ...XXXX",
"XX...                  ................                  ...XXXX",
"XX...                   ..............                   ...XXXX",
"XX...                     ..........                     ...XXXX",
"XX...                       ......                       ...XXXX",
"XX...                                                    ...XXXX",
"XX...                                                   ....XXXX",
"XX...                                                   ....XXXX",
"XX....                                                  ....XXXX",
"XX.....                                                .....XXXX",
"XX......                                              ......XXXX",
"XX.......                                           ........XXXX",
"XX...........                                    ...........XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XX..........................................................XXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
};
"""

match_case_icon = """
/* XPM */
static char *_647901377770[] = {
/* columns rows colors chars-per-pixel */
"64 64 3 1 ",
"  c black",
"z c #C3C3C3",
"x c None",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzz          zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz              zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxzzzzzzzzzzzzzzzzzzzzxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxxzzzzzzzzzzzzzzzzzxxxxxxx",
"xxxxxxxxxzz       z        zzxxxxxxxxxxxzz           zzzzzxxxxxx",
"xxxxxxxxzz        z        zzxxxxxxxxzz                 zzzzxxxx",
"xxxxxxxxzz       zzz       zzxxxxxxxzz                   zzzxxxx",
"xxxxxxxxzz       zzz        zzxxxxxzz                    zzzxxxx",
"xxxxxxxzz        zzz        zzxxxxxzz                     zzxxxx",
"xxxxxxxzz        zzzz       zzxxxxzz         zzzzz        zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzz    zzzzzzz       zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzzzzzzzzzzzz        zzxxxx",
"xxxxxxzz        zzzzzz        zzxxxxxxxzzzzzz             zzxxxx",
"xxxxxzz                       zzxxxxxxzzz                 zzxxxx",
"xxxxxzz                       zzxxxxzz                    zzxxxx",
"xxxxxzz                        zzxxzz            zz       zzxxxx",
"xxxxzz                         zzxzz         zzzzzz       zzxxxx",
"xxxxzz                         zzxzz        zzzzzzz       zzxxxx",
"xxxxzz                          zzzz       zzzzzzz        zzxxxx",
"xxxzz                           zzzz        zzzzz         zzxxxx",
"xxxzz        zzzzzzzzzzz        zzzz                      zzxxxx",
"xxxzz        zzzzzzzzzzz         zzz                      zzxxxx",
"xxxzz        zzxxxxxxxzz         zzzz             z        zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzzz           zzz       zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzxxzz       zzzzz       zzxxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
};
"""
match_whole_word_icon = """
/* XPM */
static char *_647901969918[] = {
/* columns rows colors chars-per-pixel */
"64 64 3 1 ",
"  c black",
"z c #C3C3C3",
"x c None",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzzzzzzzzzzzzzzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxzz          zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxzz           zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz             zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxzz              zzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxzzzzzzzzzzzzzzzzzzzzxxxxx",
"xxxxxxxxxzz               zzxxxxxxxxxxxxzzzzzzzzzzzzzzzzzxxxxxxx",
"xxxxxxxxxzz       z        zzxxxxxxxxxxxzz           zzzzzxxxxxx",
"xxxxxxxxzz        z        zzxxxxxxxxzz                 zzzzxxxx",
"xxxxxxxxzz       zzz       zzxxxxxxxzz                   zzzxxxx",
"xxxxxxxxzz       zzz        zzxxxxxzz                    zzzxxxx",
"xxxxxxxzz        zzz        zzxxxxxzz                     zzxxxx",
"xxxxxxxzz        zzzz       zzxxxxzz         zzzzz        zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzz    zzzzzzz       zzxxxx",
"xxxxxxzz        zzzzz        zzxxxxxzzzzzzzzzzzzzz        zzxxxx",
"xxxxxxzz        zzzzzz        zzxxxxxxxzzzzzz             zzxxxx",
"xxxxxzz                       zzxxxxxxzzz                 zzxxxx",
"xxxxxzz                       zzxxxxzz                    zzxxxx",
"xxxxxzz                        zzxxzz            zz       zzxxxx",
"xxxxzz                         zzxzz         zzzzzz       zzxxxx",
"xxxxzz                         zzxzz        zzzzzzz       zzxxxx",
"xxxxzz                          zzzz       zzzzzzz        zzxxxx",
"xxxzz                           zzzz        zzzzz         zzxxxx",
"xxxzz        zzzzzzzzzzz        zzzz                      zzxxxx",
"xxxzz        zzzzzzzzzzz         zzz                      zzxxxx",
"xxxzz        zzxxxxxxxzz         zzzz             z        zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzzz           zzz       zzxxx",
"xxxzz       zzxxxxxxxxxzz         zzxxzz       zzzzz       zzxxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxzzzzzzzzzzzzxxxxxxxxxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxx",
"xxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zz                                                            zz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
};
"""
modifiers = QtGui.QApplication.keyboardModifiers()
if modifiers == QtCore.Qt.AltModifier or SHOW_AS_TASK_DIALOG:
    showEditorAssistantDialog()
else:
    showEditorAssistantAsDockWidget()

